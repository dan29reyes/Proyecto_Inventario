/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto_inventario;

import java.io.File;
import java.io.FileOutputStream;
import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfWriter;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.biff.RowsExceededException;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfReader;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.Types;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import jxl.Sheet;
import jxl.write.Number;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.WriteException;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/**
 *
 * @author dan29reyes
 */
public class mainFrame extends javax.swing.JFrame {

    static Scanner read = new Scanner(System.in).useDelimiter("\n");
    Connection connection;
    String tipo;
    int actualUser;
    DefaultTableModel modeloTabla;

    public void conectarse() {
        String url = "jdbc:sqlserver://localhost;databaseName=Tecnologia123_Inventario;trustServerCertificate=true";
        String user = "sa", pass = "reallyStrongPwd123";
        try {
            connection = DriverManager.getConnection(url, user, pass);
            System.out.println("Conectado a MSSQL");
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public mainFrame() {
        initComponents();
        menu_panel.hide();
        ajuste_panel.hide();
        usuarios_panel.hide();
        compra_panel.hide();
        venta_panel.hide();
        productos_panel.hide();
        cliente_panel.hide();
        proveedor_panel.hide();
        rol_panel.hide();
        privilegio_panel.hide();
        this.setLocationRelativeTo(null);
        conectarse();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ajuste_panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_ajustes = new javax.swing.JTable();
        agg_ajuste_bt = new javax.swing.JButton();
        jLabel54 = new javax.swing.JLabel();
        cod_prod_ajuste = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        cant_ajuste_tb = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        tipo_ajuste_cb = new javax.swing.JComboBox<>();
        back_ajuste = new javax.swing.JButton();
        menu_panel = new javax.swing.JPanel();
        icon_menu_lbl = new javax.swing.JLabel();
        compra_bt = new javax.swing.JButton();
        ajuste_bt = new javax.swing.JButton();
        usuario_bt = new javax.swing.JButton();
        cerrar_sesion_bt = new javax.swing.JButton();
        invtec_lbl = new javax.swing.JLabel();
        bienvenido_lbl = new javax.swing.JLabel();
        producto_lbl = new javax.swing.JLabel();
        usuario_crud_lbl = new javax.swing.JLabel();
        rol_lbl = new javax.swing.JLabel();
        privilegio_lbl = new javax.swing.JLabel();
        reportes_bt = new javax.swing.JButton();
        logged_user_lbl = new javax.swing.JLabel();
        ventas_bt = new javax.swing.JButton();
        privilegio_bt = new javax.swing.JButton();
        fondo_amarillo_lbl = new javax.swing.JTextField();
        rol_bt = new javax.swing.JButton();
        proveedor_bt = new javax.swing.JButton();
        productos_bt = new javax.swing.JButton();
        cliente_bt = new javax.swing.JButton();
        privilegio_lbl1 = new javax.swing.JLabel();
        privilegio_lbl2 = new javax.swing.JLabel();
        login_panel = new javax.swing.JPanel();
        user_tb = new javax.swing.JTextField();
        user_icon_lb = new javax.swing.JLabel();
        pass_lbl = new javax.swing.JLabel();
        user_lbl = new javax.swing.JLabel();
        shape1_lbl = new javax.swing.JLabel();
        shape2_lbl = new javax.swing.JLabel();
        ingresar_bt = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        pass_tb = new javax.swing.JPasswordField();
        compra_panel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_compras = new javax.swing.JTable();
        jLabel45 = new javax.swing.JLabel();
        prov_compras_tb = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        dc_cantidad_tb = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        dc_prod_tb = new javax.swing.JTextField();
        add_compra_bt = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        venta_panel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_ventas = new javax.swing.JTable();
        agg_factura_bt = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        cli_nombre_tb = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        cant_venta_tb = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        cod_producto_tb = new javax.swing.JTextField();
        back_ventas = new javax.swing.JButton();
        cliente_panel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabla_clientes = new javax.swing.JTable();
        del_cliente_bt = new javax.swing.JButton();
        nom_cliente_tb = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        am_cliente_tb = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        ap_cliente_tb = new javax.swing.JTextField();
        edit_cliente_bt = new javax.swing.JButton();
        agg_cliente_bt = new javax.swing.JButton();
        back_cliente_bt = new javax.swing.JButton();
        proveedor_panel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabla_proveedores = new javax.swing.JTable();
        eliminar_proveedor_bt = new javax.swing.JButton();
        telefono_proveedor_tb = new javax.swing.JTextField();
        nombre_proveedor_tb = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        direccion_proveedor_tb = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        agg_proveedor_bt = new javax.swing.JButton();
        editar_proveedor_bt = new javax.swing.JButton();
        back_proveedor = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        contacto_prov_tb = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        estado_proveedor_cb = new javax.swing.JComboBox<>();
        usuarios_panel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabla_usuarios = new javax.swing.JTable();
        usuario_agregar_bt = new javax.swing.JButton();
        usuario_editar_bt = new javax.swing.JButton();
        usuario_eliminar_bt = new javax.swing.JButton();
        agg_usuario_tb = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        clave_usuario_tb = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        rol_usuario_tb = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        back_usuario = new javax.swing.JButton();
        rela_usuario_rol_bt = new javax.swing.JButton();
        productos_panel = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tabla_products = new javax.swing.JTable();
        agg_prod_bt = new javax.swing.JButton();
        edit_prod_bt = new javax.swing.JButton();
        eliminar_prod_bt = new javax.swing.JButton();
        nom_prod_tb = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        precio_prod_tb = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        marca_prod_tb = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        cat_prod_tb = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        cost_prod_tb = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();
        estado_prod_cb = new javax.swing.JComboBox<>();
        jLabel58 = new javax.swing.JLabel();
        exis_min_tb = new javax.swing.JTextField();
        exis_max_tb = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        rol_panel = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tabla_roles = new javax.swing.JTable();
        rol_agregar_bt = new javax.swing.JButton();
        rol_editar_bt = new javax.swing.JButton();
        rol_eliminar_bt = new javax.swing.JButton();
        agg_rol_tb = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        id_privilegio_rol_relacion_tb = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        rol_privilegio_relacion_bt = new javax.swing.JButton();
        id_rol_privilegio_relacion_tb = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        back_rol = new javax.swing.JButton();
        privilegio_panel = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tabla_privilegios = new javax.swing.JTable();
        agg_privilegio_bt = new javax.swing.JButton();
        editar_privilegio_bt = new javax.swing.JButton();
        eliminar_privilegio_bt = new javax.swing.JButton();
        agg_privilegio_tb = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        back_privilegio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(49, 87, 74));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(870, 630));
        setResizable(false);

        ajuste_panel.setBackground(new java.awt.Color(49, 87, 74));
        ajuste_panel.setMinimumSize(new java.awt.Dimension(800, 670));
        ajuste_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        ajuste_panel.setSize(new java.awt.Dimension(870, 600));
        ajuste_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        ajuste_panel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 240, 260));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        ajuste_panel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("AJUSTES");
        ajuste_panel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, -1, -1));

        tabla_ajustes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla_ajustes);

        ajuste_panel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 650, 350));

        agg_ajuste_bt.setText("Agregar");
        agg_ajuste_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agg_ajuste_btActionPerformed(evt);
            }
        });
        ajuste_panel.add(agg_ajuste_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 370, 90, -1));

        jLabel54.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(255, 255, 255));
        jLabel54.setText("Codigo Producto");
        ajuste_panel.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 210, -1, -1));
        ajuste_panel.add(cod_prod_ajuste, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 230, 130, -1));

        jLabel55.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(255, 255, 255));
        jLabel55.setText("Cantidad");
        ajuste_panel.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 260, -1, -1));
        ajuste_panel.add(cant_ajuste_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 280, 130, -1));

        jLabel56.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(255, 255, 255));
        jLabel56.setText("Tipo");
        ajuste_panel.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 310, -1, -1));

        tipo_ajuste_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ENTRADA", "SALIDA" }));
        ajuste_panel.add(tipo_ajuste_cb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 330, 130, -1));

        back_ajuste.setText("back");
        back_ajuste.setToolTipText("");
        back_ajuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_ajusteActionPerformed(evt);
            }
        });
        ajuste_panel.add(back_ajuste, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, -1));

        menu_panel.setBackground(new java.awt.Color(49, 87, 74));
        menu_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        menu_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        icon_menu_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/userIcon.png"))); // NOI18N
        menu_panel.add(icon_menu_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, -1, -1));

        compra_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/compra.jpeg"))); // NOI18N
        compra_bt.setText("Compra");
        compra_bt.setToolTipText("");
        compra_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compra_btActionPerformed(evt);
            }
        });
        menu_panel.add(compra_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, 130, -1));

        ajuste_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ajuste_icon.png"))); // NOI18N
        ajuste_bt.setText("Ajuste");
        ajuste_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajuste_btActionPerformed(evt);
            }
        });
        menu_panel.add(ajuste_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 130, -1));

        usuario_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user_menu_icon.png"))); // NOI18N
        usuario_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuario_btActionPerformed(evt);
            }
        });
        menu_panel.add(usuario_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 230, 130, -1));

        cerrar_sesion_bt.setText("Cerrar Sesion");
        cerrar_sesion_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrar_sesion_btActionPerformed(evt);
            }
        });
        menu_panel.add(cerrar_sesion_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, -1, -1));

        invtec_lbl.setFont(new java.awt.Font("Helvetica Neue", 3, 36)); // NOI18N
        invtec_lbl.setForeground(new java.awt.Color(255, 255, 255));
        invtec_lbl.setText("Inventario Tecnologia123");
        menu_panel.add(invtec_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 110, -1, -1));

        bienvenido_lbl.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        bienvenido_lbl.setForeground(new java.awt.Color(255, 255, 255));
        bienvenido_lbl.setText("Bienvenido al Sistema de");
        menu_panel.add(bienvenido_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, -1, -1));

        producto_lbl.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        producto_lbl.setForeground(new java.awt.Color(255, 255, 255));
        producto_lbl.setText("Productos");
        menu_panel.add(producto_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 200, -1, -1));

        usuario_crud_lbl.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        usuario_crud_lbl.setForeground(new java.awt.Color(255, 255, 255));
        usuario_crud_lbl.setText("Usuario");
        menu_panel.add(usuario_crud_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 200, 70, -1));

        rol_lbl.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        rol_lbl.setForeground(new java.awt.Color(255, 255, 255));
        rol_lbl.setText("Rol");
        menu_panel.add(rol_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 400, 30, -1));

        privilegio_lbl.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        privilegio_lbl.setForeground(new java.awt.Color(255, 255, 255));
        privilegio_lbl.setText("Proveedor");
        menu_panel.add(privilegio_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 400, 90, -1));

        reportes_bt.setText("Generar Reportes");
        reportes_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportes_btActionPerformed(evt);
            }
        });
        menu_panel.add(reportes_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 510, 140, 40));

        logged_user_lbl.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        logged_user_lbl.setText("Usuario");
        menu_panel.add(logged_user_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, -1, -1));

        ventas_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sale_icon.png"))); // NOI18N
        ventas_bt.setText("Venta");
        ventas_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ventas_btActionPerformed(evt);
            }
        });
        menu_panel.add(ventas_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 130, -1));

        privilegio_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/privilegio_icon.png"))); // NOI18N
        privilegio_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privilegio_btActionPerformed(evt);
            }
        });
        menu_panel.add(privilegio_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 330, 130, -1));

        fondo_amarillo_lbl.setEditable(false);
        fondo_amarillo_lbl.setBackground(new java.awt.Color(231, 164, 6));
        fondo_amarillo_lbl.setBorder(null);
        fondo_amarillo_lbl.setEnabled(false);
        menu_panel.add(fondo_amarillo_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 600));

        rol_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rol_icon.png"))); // NOI18N
        rol_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rol_btActionPerformed(evt);
            }
        });
        menu_panel.add(rol_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 430, 130, -1));

        proveedor_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/proveedor_icon.png"))); // NOI18N
        proveedor_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proveedor_btActionPerformed(evt);
            }
        });
        menu_panel.add(proveedor_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 430, 130, -1));

        productos_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/producto_icon.png"))); // NOI18N
        productos_bt.setToolTipText("");
        productos_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productos_btActionPerformed(evt);
            }
        });
        menu_panel.add(productos_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 230, 130, -1));

        cliente_bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cliente_icon.png"))); // NOI18N
        cliente_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cliente_btActionPerformed(evt);
            }
        });
        menu_panel.add(cliente_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 130, -1));

        privilegio_lbl1.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        privilegio_lbl1.setForeground(new java.awt.Color(255, 255, 255));
        privilegio_lbl1.setText("Privilegio");
        menu_panel.add(privilegio_lbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 300, 80, -1));

        privilegio_lbl2.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        privilegio_lbl2.setForeground(new java.awt.Color(255, 255, 255));
        privilegio_lbl2.setText("Cliente");
        menu_panel.add(privilegio_lbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 70, -1));

        login_panel.setBackground(new java.awt.Color(49, 87, 74));
        login_panel.setMinimumSize(new java.awt.Dimension(700, 600));
        login_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        login_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        user_tb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user_tbActionPerformed(evt);
            }
        });
        login_panel.add(user_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 270, 248, -1));

        user_icon_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/userIcon.png"))); // NOI18N
        login_panel.add(user_icon_lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 100, 110));

        pass_lbl.setForeground(new java.awt.Color(255, 255, 255));
        pass_lbl.setText("Contraseña");
        login_panel.add(pass_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 310, -1, -1));

        user_lbl.setForeground(new java.awt.Color(255, 255, 255));
        user_lbl.setText("Usuario");
        login_panel.add(user_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 250, -1, -1));

        shape1_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        login_panel.add(shape1_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(-90, -30, 360, 270));

        shape2_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        login_panel.add(shape2_lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 210, 280, 390));

        ingresar_bt.setText("Ingresar");
        ingresar_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresar_btActionPerformed(evt);
            }
        });
        login_panel.add(ingresar_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 370, 110, -1));

        jButton7.setText("Salir");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        login_panel.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 60, -1));
        login_panel.add(pass_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 330, 250, -1));

        compra_panel.setBackground(new java.awt.Color(49, 87, 74));
        compra_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        compra_panel.setSize(new java.awt.Dimension(870, 600));
        compra_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        compra_panel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 240, 260));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        compra_panel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("COMPRAS");
        compra_panel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, -1, -1));

        tabla_compras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabla_compras);

        compra_panel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 660, 350));

        jLabel45.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setText("Proveedor");
        compra_panel.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 220, -1, -1));
        compra_panel.add(prov_compras_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 240, 120, -1));

        jLabel46.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(255, 255, 255));
        jLabel46.setText("Cantidad");
        compra_panel.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 270, -1, -1));
        compra_panel.add(dc_cantidad_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 290, 120, -1));

        jLabel48.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jLabel48.setText("Producto");
        compra_panel.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 320, -1, -1));
        compra_panel.add(dc_prod_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 340, 120, -1));

        add_compra_bt.setText("Agregar");
        add_compra_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_compra_btActionPerformed(evt);
            }
        });
        compra_panel.add(add_compra_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 380, 80, -1));

        jButton2.setText("back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        compra_panel.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, -1));

        venta_panel.setBackground(new java.awt.Color(49, 87, 74));
        venta_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        venta_panel.setSize(new java.awt.Dimension(870, 600));
        venta_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        venta_panel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 240, 260));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        venta_panel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("VENTAS");
        venta_panel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, -1, -1));

        tabla_ventas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla_ventas);

        venta_panel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 660, 350));

        agg_factura_bt.setText("Agregar");
        agg_factura_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agg_factura_btActionPerformed(evt);
            }
        });
        venta_panel.add(agg_factura_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 370, 80, -1));

        jLabel51.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel51.setForeground(new java.awt.Color(255, 255, 255));
        jLabel51.setText("Cliente");
        venta_panel.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 210, -1, -1));
        venta_panel.add(cli_nombre_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 230, 120, -1));

        jLabel52.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(255, 255, 255));
        jLabel52.setText("Cantidad");
        venta_panel.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 260, -1, -1));
        venta_panel.add(cant_venta_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 280, 120, -1));

        jLabel53.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(255, 255, 255));
        jLabel53.setText("Producto");
        venta_panel.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 310, -1, -1));
        venta_panel.add(cod_producto_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 330, 120, -1));

        back_ventas.setText("back");
        back_ventas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_ventasActionPerformed(evt);
            }
        });
        venta_panel.add(back_ventas, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, -1));

        cliente_panel.setBackground(new java.awt.Color(49, 87, 74));
        cliente_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        cliente_panel.setSize(new java.awt.Dimension(870, 600));
        cliente_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        cliente_panel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 240, 260));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        cliente_panel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("CLIENTE");
        cliente_panel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, -1, -1));

        tabla_clientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tabla_clientes);

        cliente_panel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 650, 350));

        del_cliente_bt.setText("Eliminar");
        del_cliente_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del_cliente_btActionPerformed(evt);
            }
        });
        cliente_panel.add(del_cliente_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 500, 120, 30));
        cliente_panel.add(nom_cliente_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 160, 130, -1));

        jLabel47.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(255, 255, 255));
        jLabel47.setText("Nombre");
        cliente_panel.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 140, -1, -1));

        jLabel49.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(255, 255, 255));
        jLabel49.setText("Apellido Materno");
        cliente_panel.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, -1, -1));
        cliente_panel.add(am_cliente_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 220, 130, -1));

        jLabel50.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(255, 255, 255));
        jLabel50.setText("Apellido Paterno");
        cliente_panel.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 260, -1, -1));
        cliente_panel.add(ap_cliente_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 280, 130, -1));

        edit_cliente_bt.setText("Editar");
        edit_cliente_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_cliente_btActionPerformed(evt);
            }
        });
        cliente_panel.add(edit_cliente_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 360, 90, -1));

        agg_cliente_bt.setText("Agregar");
        agg_cliente_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agg_cliente_btActionPerformed(evt);
            }
        });
        cliente_panel.add(agg_cliente_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 320, 90, -1));

        back_cliente_bt.setText("back");
        back_cliente_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_cliente_btActionPerformed(evt);
            }
        });
        cliente_panel.add(back_cliente_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, -1));

        proveedor_panel.setBackground(new java.awt.Color(49, 87, 74));
        proveedor_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        proveedor_panel.setSize(new java.awt.Dimension(870, 600));
        proveedor_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        proveedor_panel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 240, 260));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        proveedor_panel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel15.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("PROVEEDOR");
        proveedor_panel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, -1, -1));

        tabla_proveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "codigo", "nombre", "direccion", "telefono", "fecha creacion", "fecha edicion", "usuario creador", "usuario editor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tabla_proveedores);

        proveedor_panel.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 620, 380));

        eliminar_proveedor_bt.setText("Eliminar");
        eliminar_proveedor_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_proveedor_btActionPerformed(evt);
            }
        });
        proveedor_panel.add(eliminar_proveedor_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 530, 130, 30));
        proveedor_panel.add(telefono_proveedor_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 200, 150, -1));
        proveedor_panel.add(nombre_proveedor_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 150, 150, -1));

        jLabel35.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Nombre");
        proveedor_panel.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 130, -1, -1));

        jLabel36.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Telefono");
        proveedor_panel.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 180, -1, -1));
        proveedor_panel.add(direccion_proveedor_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 250, 150, -1));

        jLabel37.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("Direccion");
        proveedor_panel.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 230, -1, -1));

        agg_proveedor_bt.setText("Agregar");
        agg_proveedor_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agg_proveedor_btActionPerformed(evt);
            }
        });
        proveedor_panel.add(agg_proveedor_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 390, 80, -1));

        editar_proveedor_bt.setText("Editar");
        editar_proveedor_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editar_proveedor_btActionPerformed(evt);
            }
        });
        proveedor_panel.add(editar_proveedor_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 430, 80, -1));

        back_proveedor.setText("back");
        back_proveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_proveedorActionPerformed(evt);
            }
        });
        proveedor_panel.add(back_proveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 530, -1, -1));

        jLabel43.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Estado");
        proveedor_panel.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 330, -1, -1));
        proveedor_panel.add(contacto_prov_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 300, 150, -1));

        jLabel57.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(255, 255, 255));
        jLabel57.setText("Contacto");
        proveedor_panel.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 280, -1, -1));

        estado_proveedor_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACTIVO", "INNACTIVO" }));
        proveedor_panel.add(estado_proveedor_cb, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 350, 150, -1));

        usuarios_panel.setBackground(new java.awt.Color(49, 87, 74));
        usuarios_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        usuarios_panel.setSize(new java.awt.Dimension(870, 600));
        usuarios_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        usuarios_panel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 240, 260));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        usuarios_panel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel18.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("USUARIOS");
        usuarios_panel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, -1, -1));

        tabla_usuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Fecha Creacion", "Usuario Creador", "Fecha Edicion", "Usuario Editor"
            }
        ));
        jScrollPane6.setViewportView(tabla_usuarios);

        usuarios_panel.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 640, 350));

        usuario_agregar_bt.setText("Agregar");
        usuario_agregar_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuario_agregar_btActionPerformed(evt);
            }
        });
        usuarios_panel.add(usuario_agregar_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 270, 80, -1));

        usuario_editar_bt.setText("Editar");
        usuario_editar_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuario_editar_btActionPerformed(evt);
            }
        });
        usuarios_panel.add(usuario_editar_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 310, 80, -1));

        usuario_eliminar_bt.setText("Eliminar");
        usuario_eliminar_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuario_eliminar_btActionPerformed(evt);
            }
        });
        usuarios_panel.add(usuario_eliminar_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 500, 140, 30));
        usuarios_panel.add(agg_usuario_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 160, 120, -1));

        jLabel22.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Usuario");
        usuarios_panel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 130, -1, -1));
        usuarios_panel.add(clave_usuario_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 230, 120, -1));

        jLabel23.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Clave");
        usuarios_panel.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, 50, -1));
        usuarios_panel.add(rol_usuario_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 390, 120, -1));

        jLabel24.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("ID Rol");
        usuarios_panel.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 360, 50, -1));

        back_usuario.setText("back");
        back_usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_usuarioActionPerformed(evt);
            }
        });
        usuarios_panel.add(back_usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, 30));

        rela_usuario_rol_bt.setText("relacionar");
        rela_usuario_rol_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rela_usuario_rol_btActionPerformed(evt);
            }
        });
        usuarios_panel.add(rela_usuario_rol_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 430, -1, -1));

        productos_panel.setBackground(new java.awt.Color(49, 87, 74));
        productos_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        productos_panel.setSize(new java.awt.Dimension(870, 600));
        productos_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        productos_panel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 420, 240, 260));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        productos_panel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel21.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("PRODUCTOS");
        productos_panel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, -1, -1));

        tabla_products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(tabla_products);

        productos_panel.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 690, 350));

        agg_prod_bt.setText("Agregar");
        agg_prod_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agg_prod_btActionPerformed(evt);
            }
        });
        productos_panel.add(agg_prod_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 500, 100, 30));

        edit_prod_bt.setText("Editar");
        edit_prod_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_prod_btActionPerformed(evt);
            }
        });
        productos_panel.add(edit_prod_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 500, 100, 30));

        eliminar_prod_bt.setText("Eliminar");
        eliminar_prod_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_prod_btActionPerformed(evt);
            }
        });
        productos_panel.add(eliminar_prod_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 500, 110, 30));
        productos_panel.add(nom_prod_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 120, 120, -1));

        jLabel38.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText("Nombre");
        productos_panel.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 100, -1, -1));

        jLabel39.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText("estado");
        productos_panel.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 150, -1, -1));

        jLabel40.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("precio");
        productos_panel.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 200, -1, -1));
        productos_panel.add(precio_prod_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 220, 120, -1));

        jLabel41.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("marca");
        productos_panel.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 250, -1, -1));
        productos_panel.add(marca_prod_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 270, 120, -1));

        jLabel42.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 255, 255));
        jLabel42.setText("categoria");
        productos_panel.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 300, -1, -1));
        productos_panel.add(cat_prod_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 320, 120, -1));

        jLabel44.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText("costo");
        productos_panel.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 350, -1, -1));
        productos_panel.add(cost_prod_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 370, 120, -1));

        jButton14.setText("back");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        productos_panel.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 500, -1, -1));

        estado_prod_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACTIVO", "INNACTIVO" }));
        productos_panel.add(estado_prod_cb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 170, 120, -1));

        jLabel58.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(255, 255, 255));
        jLabel58.setText("Existenica Min");
        productos_panel.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 400, -1, -1));
        productos_panel.add(exis_min_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 420, 120, -1));
        productos_panel.add(exis_max_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 470, 120, -1));

        jLabel59.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(255, 255, 255));
        jLabel59.setText("Existenica Max");
        productos_panel.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 450, -1, -1));

        rol_panel.setBackground(new java.awt.Color(49, 87, 74));
        rol_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        rol_panel.setSize(new java.awt.Dimension(870, 600));
        rol_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        rol_panel.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 400, 240, 260));

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        rol_panel.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel27.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("ROL");
        rol_panel.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 100, -1));

        tabla_roles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id Rol", "Nombre", "Fecha Creacion", "Usuario Creador", "Fecha Edicion", "Usuario Editor"
            }
        ));
        jScrollPane8.setViewportView(tabla_roles);

        rol_panel.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 640, 350));

        rol_agregar_bt.setText("Agregar");
        rol_agregar_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rol_agregar_btActionPerformed(evt);
            }
        });
        rol_panel.add(rol_agregar_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 200, 80, -1));

        rol_editar_bt.setText("Editar");
        rol_editar_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rol_editar_btActionPerformed(evt);
            }
        });
        rol_panel.add(rol_editar_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 240, 80, -1));

        rol_eliminar_bt.setText("Eliminar");
        rol_eliminar_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rol_eliminar_btActionPerformed(evt);
            }
        });
        rol_panel.add(rol_eliminar_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 500, 140, 30));
        rol_panel.add(agg_rol_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 160, 120, -1));

        jLabel28.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Nombre");
        rol_panel.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 130, -1, -1));
        rol_panel.add(id_privilegio_rol_relacion_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 400, 120, -1));

        jLabel30.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("ID Rol");
        rol_panel.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 310, 100, -1));

        rol_privilegio_relacion_bt.setText("Relacionar");
        rol_privilegio_relacion_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rol_privilegio_relacion_btActionPerformed(evt);
            }
        });
        rol_panel.add(rol_privilegio_relacion_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 440, 100, -1));
        rol_panel.add(id_rol_privilegio_relacion_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 340, 120, -1));

        jLabel34.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setText("ID Privilegio");
        rol_panel.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 370, 100, -1));

        back_rol.setText("back");
        back_rol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_rolActionPerformed(evt);
            }
        });
        rol_panel.add(back_rol, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, 30));

        privilegio_panel.setBackground(new java.awt.Color(49, 87, 74));
        privilegio_panel.setPreferredSize(new java.awt.Dimension(870, 600));
        privilegio_panel.setSize(new java.awt.Dimension(870, 600));
        privilegio_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BG02.png"))); // NOI18N
        privilegio_panel.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 240, 260));

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cardmom_BG.png"))); // NOI18N
        privilegio_panel.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, -50, 360, 220));

        jLabel32.setFont(new java.awt.Font("Helvetica Neue", 3, 48)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("Privilegio");
        privilegio_panel.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 210, -1));

        tabla_privilegios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id Privilegio", "Nombre", "Fecha Creacion", "Usuario Creador", "Fecha Edicion", "Usuario Editor"
            }
        ));
        jScrollPane9.setViewportView(tabla_privilegios);

        privilegio_panel.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 640, 350));

        agg_privilegio_bt.setText("Agregar");
        agg_privilegio_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agg_privilegio_btActionPerformed(evt);
            }
        });
        privilegio_panel.add(agg_privilegio_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 200, 80, -1));

        editar_privilegio_bt.setText("Editar");
        editar_privilegio_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editar_privilegio_btActionPerformed(evt);
            }
        });
        privilegio_panel.add(editar_privilegio_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 240, 80, -1));

        eliminar_privilegio_bt.setText("Eliminar");
        eliminar_privilegio_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_privilegio_btActionPerformed(evt);
            }
        });
        privilegio_panel.add(eliminar_privilegio_bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 500, 140, 30));
        privilegio_panel.add(agg_privilegio_tb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 160, 120, -1));

        jLabel33.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("Nombre");
        privilegio_panel.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 130, -1, -1));

        back_privilegio.setText("back");
        back_privilegio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_privilegioActionPerformed(evt);
            }
        });
        privilegio_panel.add(back_privilegio, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(login_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(menu_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ajuste_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(compra_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(venta_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cliente_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(proveedor_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(usuarios_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(productos_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rol_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(privilegio_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(login_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(menu_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(ajuste_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(compra_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(venta_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(productos_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(usuarios_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(rol_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(privilegio_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(proveedor_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(cliente_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void user_tbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user_tbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user_tbActionPerformed

    private void cerrar_sesion_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrar_sesion_btActionPerformed
        JOptionPane.showMessageDialog(this, "Se ha cerrado sesion!");
        menu_panel.hide();
        user_tb.setText("");
        pass_tb.setText("");
        login_panel.show();
    }//GEN-LAST:event_cerrar_sesion_btActionPerformed

    private void compra_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compra_btActionPerformed
        try {
            String sqlc = "SELECT * FROM detalle_compra";
            PreparedStatement pstmt2 = connection.prepareCall(sqlc);
            ResultSet result = pstmt2.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("Detalle");
            modeloTabla.addColumn("Compra");
            modeloTabla.addColumn("Producto");
            modeloTabla.addColumn("Cantidad");
            modeloTabla.addColumn("Subtotal");
            modeloTabla.addColumn("Costo");
            modeloTabla.addColumn("Fecha Creacion");
            modeloTabla.addColumn("Fecha Edicion");
            modeloTabla.addColumn("Creador");
            modeloTabla.addColumn("Editor");
            while (result.next()) {
                Object[] fila = {result.getInt("id_detalle"), result.getInt("id_compra"), result.getInt("codigo_producto"), result.getInt("cantidad_detalle"), result.getDouble("subtotal_detalle"), result.getDouble("costo_detalle"),
                    result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                modeloTabla.addRow(fila);
            }
            tabla_compras.setModel(modeloTabla);
            menu_panel.hide();
            compra_panel.show();
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_compra_btActionPerformed

    private void usuario_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuario_btActionPerformed
        try {
            String sql = "SELECT * FROM usuario";
            PreparedStatement pstmt = connection.prepareCall(sql);
            ResultSet rs = pstmt.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("codigo");
            modeloTabla.addColumn("nombre");
            modeloTabla.addColumn("fecha creacion");
            modeloTabla.addColumn("fecha edicion");
            modeloTabla.addColumn("usuario creador");
            modeloTabla.addColumn("usuario editor");
            while (rs.next()) {
                Object[] fila = {rs.getInt("codigo_usuario"), rs.getString("nombre_usuario"), rs.getString("fecha_creacion"),
                    rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                rs.getString("clave_usuario");
                modeloTabla.addRow(fila);
            }
            tabla_usuarios.setModel(modeloTabla);
            menu_panel.hide();
            usuarios_panel.show();
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usuario_btActionPerformed

    private void ajuste_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajuste_btActionPerformed
        try {
            String sqlc = "SELECT * FROM detalle_ajuste";
            PreparedStatement pstmt2 = connection.prepareCall(sqlc);
            ResultSet result = pstmt2.executeQuery();
            sqlc = "SELECT * FROM ajuste";
            PreparedStatement pstmt3 = connection.prepareCall(sqlc);
            ResultSet result2 = pstmt3.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("Detalle");
            modeloTabla.addColumn("Ajuste");
            modeloTabla.addColumn("Producto");
            modeloTabla.addColumn("Tipo");
            modeloTabla.addColumn("Cantidad");
            modeloTabla.addColumn("Subtotal");
            modeloTabla.addColumn("Costo");
            modeloTabla.addColumn("Fecha Creacion");
            modeloTabla.addColumn("Fecha Edicion");
            modeloTabla.addColumn("Creador");
            modeloTabla.addColumn("Editor");
            while (result.next() && result2.next()) {
                result2.getInt("id_ajuste");
                Object[] fila = {result.getInt("id_detalle"), result.getInt("id_ajuste"), result.getInt("codigo_producto"), result2.getString("comentario_ajuste"), result.getInt("cantidad_detalle"), result.getDouble("subtotal_detalle"),
                    result.getDouble("costo_detalle"), result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                modeloTabla.addRow(fila);
                result2.getString("fecha_creacion");
                result2.getString("fecha_edicion");
                result2.getInt("usuario_creacion");
                result2.getInt("usuario_editor");
            }
            tabla_ajustes.setModel(modeloTabla);
            menu_panel.hide();
            ajuste_panel.show();
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ajuste_btActionPerformed

    private void reportes_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportes_btActionPerformed
        try {
            WritableWorkbook workbook = Workbook.createWorkbook(new File("Reportes Inventario.xls"));
            //Hoja de Reporte de existencia de productos activos
            WritableSheet sheet = workbook.createSheet("Existencia de Productos", 0);
            sheet.addCell(new Label(0, 0, "Codigo"));
            sheet.addCell(new Label(1, 0, "Nombre"));
            sheet.addCell(new Label(2, 0, "Precio"));
            sheet.addCell(new Label(3, 0, "Marca"));
            sheet.addCell(new Label(4, 0, "Categoria"));
            sheet.addCell(new Label(5, 0, "Existencia"));
            sheet.addCell(new Label(6, 0, "Costo"));
            sheet.addCell(new Label(7, 0, "Existencia Minima"));
            sheet.addCell(new Label(8, 0, "Existencia Maxima"));
            sheet.addCell(new Label(9, 0, "Fecha Creacion"));
            sheet.addCell(new Label(10, 0, "Fecha Edicion"));
            sheet.addCell(new Label(11, 0, "Usuario Creador"));
            sheet.addCell(new Label(12, 0, "Usuario Editor"));
            sheet.addCell(new Label(14, 0, "Genero Excel"));
            sheet.addCell(new Label(15, 0, "Fecha Generacion"));
            sheet.addCell(new Number(14, 1, actualUser));
            sheet.addCell(new Label(15, 1, new Date().toGMTString()));
            String sql = "{call sp_existencia_activa}";
            CallableStatement pstmt = connection.prepareCall(sql);
            ResultSet rs = pstmt.executeQuery();
            int i = 1;
            while (rs.next()) {
                try {
                    sheet.addCell(new Number(0, i, rs.getInt("codigo_producto")));
                    sheet.addCell(new Label(1, i, rs.getString("nombre_producto")));
                    sheet.addCell(new Number(2, i, rs.getDouble("precio_producto")));
                    sheet.addCell(new Label(3, i, rs.getString("marca_producto")));
                    sheet.addCell(new Label(4, i, rs.getString("categoria_producto")));
                    sheet.addCell(new Number(5, i, rs.getInt("existencia_producto")));
                    sheet.addCell(new Number(6, i, rs.getDouble("costo_producto")));
                    sheet.addCell(new Number(7, i, rs.getInt("existencia_minima")));
                    sheet.addCell(new Number(8, i, rs.getInt("existencia_maxima")));
                    sheet.addCell(new Label(9, i, rs.getString("fecha_creacion")));
                    sheet.addCell(new Label(10, i, rs.getString("fecha_edicion")));
                    sheet.addCell(new Number(11, i, rs.getInt("usuario_creador")));
                    sheet.addCell(new Number(12, i, rs.getInt("usuario_editor")));
                } catch (SQLException ex) {
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                i++;
            }
            rs.close();
            pstmt.close();
            //Reporte de productos por bajo de la existencia minima
            sheet = workbook.createSheet("Productos por Existencia Minima", 1);
            sheet.addCell(new Label(0, 0, "Codigo"));
            sheet.addCell(new Label(1, 0, "Nombre"));
            sheet.addCell(new Label(2, 0, "Precio"));
            sheet.addCell(new Label(3, 0, "Marca"));
            sheet.addCell(new Label(4, 0, "Categoria"));
            sheet.addCell(new Label(5, 0, "Existencia"));
            sheet.addCell(new Label(6, 0, "Costo"));
            sheet.addCell(new Label(7, 0, "Existencia Minima"));
            sheet.addCell(new Label(8, 0, "Existencia Maxima"));
            sheet.addCell(new Label(9, 0, "Fecha Creacion"));
            sheet.addCell(new Label(10, 0, "Fecha Edicion"));
            sheet.addCell(new Label(11, 0, "Usuario Creador"));
            sheet.addCell(new Label(12, 0, "Usuario Editor"));
            sheet.addCell(new Label(13, 0, "Calculo Existencia Minima"));
            sheet.addCell(new Label(14, 0, "Calculo Existencia Maxima"));
            sheet.addCell(new Label(16, 0, "Genero Excel"));
            sheet.addCell(new Label(17, 0, "Fecha Generacion"));
            sheet.addCell(new Number(16, 1, actualUser));
            sheet.addCell(new Label(17, 1, new Date().toGMTString()));
            sql = "{call sp_debajo_minimo}";
            pstmt = connection.prepareCall(sql);
            rs = pstmt.executeQuery();
            i = 1;
            while (rs.next()) {
                try {
                    sheet.addCell(new Number(0, i, rs.getInt("codigo_producto")));
                    sheet.addCell(new Label(1, i, rs.getString("nombre_producto")));
                    sheet.addCell(new Number(2, i, rs.getDouble("precio_producto")));
                    sheet.addCell(new Label(3, i, rs.getString("marca_producto")));
                    sheet.addCell(new Label(4, i, rs.getString("categoria_producto")));
                    sheet.addCell(new Number(5, i, rs.getInt("existencia_producto")));
                    sheet.addCell(new Number(6, i, rs.getDouble("costo_producto")));
                    sheet.addCell(new Number(7, i, rs.getInt("existencia_minima")));
                    sheet.addCell(new Number(8, i, rs.getInt("existencia_maxima")));
                    sheet.addCell(new Label(9, i, rs.getString("fecha_creacion")));
                    sheet.addCell(new Label(10, i, rs.getString("fecha_edicion")));
                    sheet.addCell(new Number(11, i, rs.getInt("usuario_creador")));
                    sheet.addCell(new Number(12, i, rs.getInt("usuario_editor")));
                    sheet.addCell(new Number(13, i, rs.getInt("calculo_minimo")));
                    sheet.addCell(new Number(14, i, rs.getInt("calculo_maximo")));
                } catch (SQLException ex) {
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                i++;
            }
            rs.close();
            pstmt.close();
            //Reporte compra por producto
            sheet = workbook.createSheet("Compras por Producto", 2);
            sheet.addCell(new Label(0, 0, "Codigo"));
            sheet.addCell(new Label(1, 0, "Producto"));
            sheet.addCell(new Label(2, 0, "Proveedor"));
            sheet.addCell(new Label(3, 0, "Cantidad"));
            sheet.addCell(new Label(4, 0, "Costo"));
            sheet.addCell(new Label(5, 0, "Fecha Creacion"));
            sheet.addCell(new Label(7, 0, "Genero Excel"));
            sheet.addCell(new Label(8, 0, "Fecha Generacion"));
            sheet.addCell(new Number(7, 1, actualUser));
            sheet.addCell(new Label(8, 1, new Date().toGMTString()));
            sql = "{call sp_compras_producto}";
            pstmt = connection.prepareCall(sql);
            rs = pstmt.executeQuery();
            i = 1;
            while (rs.next()) {
                try {
                    sheet.addCell(new Number(0, i, rs.getInt("codigo_producto")));
                    sheet.addCell(new Label(1, i, rs.getString("nombre_producto")));
                    sheet.addCell(new Label(2, i, rs.getString("nombre_proveedor")));
                    sheet.addCell(new Number(3, i, rs.getInt("cantidad_detalle")));
                    sheet.addCell(new Number(4, i, rs.getDouble("costo_detalle")));
                    sheet.addCell(new Label(5, i, rs.getString("fecha_creacion")));
                } catch (SQLException ex) {
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                i++;
            }
            rs.close();
            pstmt.close();
            workbook.write();
            Sheet sheets = workbook.getSheet(0);
            
            workbook.close();
            JOptionPane.showMessageDialog(this, "Documento de Excel Generado");
        } catch (IOException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reportes_btActionPerformed

    private void ingresar_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresar_btActionPerformed
        try {
            agg_ajuste_bt.setEnabled(false);
            add_compra_bt.setEnabled(false);
            agg_factura_bt.setEnabled(false);
            usuario_agregar_bt.setEnabled(false);
            usuario_eliminar_bt.setEnabled(false);
            usuario_editar_bt.setEnabled(false);
            rela_usuario_rol_bt.setEnabled(false);
            agg_prod_bt.setEnabled(false);
            edit_prod_bt.setEnabled(false);
            eliminar_prod_bt.setEnabled(false);
            rol_agregar_bt.setEnabled(false);
            rol_editar_bt.setEnabled(false);
            rol_eliminar_bt.setEnabled(false);
            rol_privilegio_relacion_bt.setEnabled(false);
            agg_privilegio_bt.setEnabled(false);
            editar_privilegio_bt.setEnabled(false);
            eliminar_privilegio_bt.setEnabled(false);
            agg_proveedor_bt.setEnabled(false);
            editar_proveedor_bt.setEnabled(false);
            eliminar_proveedor_bt.setEnabled(false);
            del_cliente_bt.setEnabled(false);
            agg_cliente_bt.setEnabled(false);
            edit_cliente_bt.setEnabled(false);
            reportes_bt.setEnabled(false);
            String sql = "{? = call verificar_usuario(?, ?)}";
            CallableStatement stmt = connection.prepareCall(sql);
            stmt.registerOutParameter(1, Types.INTEGER);
            stmt.setString(2, user_tb.getText());
            stmt.setString(3, pass_tb.getText());
            stmt.execute();
            int resultado = stmt.getInt(1);
            actualUser = resultado;
            stmt.close();
            if (resultado != -1) {
                String sql2 = "{call sp_usuario_rol_read(?)}";
                CallableStatement clstmt = connection.prepareCall(sql2);
                clstmt.setInt(1, actualUser);
                ResultSet rs = clstmt.executeQuery();
                List<Integer> roles = new ArrayList<>();
                while (rs.next()) {
                    int nombreRol = rs.getInt("id_rol");
                    roles.add(nombreRol);
                }
                sql2 = "{call sp_rol_privilegio_read(?)}";
                CallableStatement clstmt2 = connection.prepareCall(sql2);
                clstmt2.setInt(1, actualUser);
                ResultSet rs2 = clstmt2.executeQuery();
                List<Integer> privilegios = new ArrayList<>();
                while (rs2.next()) {
                    int nomPriv = rs2.getInt("id_privilegio");
                    privilegios.add(nomPriv);
                }
                if (roles.contains(1006)) {
                    productos_bt.setEnabled(true);
                    usuario_bt.setEnabled(true);
                    proveedor_bt.setEnabled(true);
                    cliente_bt.setEnabled(true);
                    rol_bt.setEnabled(true);
                    privilegio_bt.setEnabled(true);
                    compra_bt.setEnabled(true);
                    ventas_bt.setEnabled(true);
                    ajuste_bt.setEnabled(true);
                    agg_ajuste_bt.setEnabled(true);
                    add_compra_bt.setEnabled(true);
                    agg_factura_bt.setEnabled(true);
                    usuario_agregar_bt.setEnabled(true);
                    usuario_eliminar_bt.setEnabled(true);
                    usuario_editar_bt.setEnabled(true);
                    rela_usuario_rol_bt.setEnabled(true);
                    agg_prod_bt.setEnabled(true);
                    edit_prod_bt.setEnabled(true);
                    eliminar_prod_bt.setEnabled(true);
                    rol_agregar_bt.setEnabled(true);
                    rol_editar_bt.setEnabled(true);
                    rol_eliminar_bt.setEnabled(true);
                    rol_privilegio_relacion_bt.setEnabled(true);
                    agg_privilegio_bt.setEnabled(true);
                    editar_privilegio_bt.setEnabled(true);
                    eliminar_privilegio_bt.setEnabled(true);
                    agg_proveedor_bt.setEnabled(true);
                    editar_proveedor_bt.setEnabled(true);
                    eliminar_proveedor_bt.setEnabled(true);
                    del_cliente_bt.setEnabled(true);
                    agg_cliente_bt.setEnabled(true);
                    edit_cliente_bt.setEnabled(true);
                    reportes_bt.setEnabled(true);
                } else if (roles.contains(2)) {
                    productos_bt.setEnabled(true);
                    usuario_bt.setEnabled(false);
                    proveedor_bt.setEnabled(false);
                    cliente_bt.setEnabled(true);
                    rol_bt.setEnabled(false);
                    privilegio_bt.setEnabled(false);
                    compra_bt.setEnabled(false);
                    ventas_bt.setEnabled(true);
                    ajuste_bt.setEnabled(false);
                    if (privilegios.contains(1)) {
                        agg_factura_bt.setEnabled(true);
                        agg_cliente_bt.setEnabled(true);
                        agg_prod_bt.setEnabled(true);
                    }
                    if (privilegios.contains(3)) {
                        edit_prod_bt.setEnabled(true);
                        edit_cliente_bt.setEnabled(true);
                    }
                    if (privilegios.contains(1002)) {
                        eliminar_prod_bt.setEnabled(true);
                        del_cliente_bt.setEnabled(true);
                    }
                } else if (roles.contains(3002)) {
                    productos_bt.setEnabled(true);
                    usuario_bt.setEnabled(false);
                    proveedor_bt.setEnabled(true);
                    cliente_bt.setEnabled(false);
                    rol_bt.setEnabled(false);
                    privilegio_bt.setEnabled(false);
                    compra_bt.setEnabled(true);
                    ventas_bt.setEnabled(false);
                    ajuste_bt.setEnabled(false);
                    if (privilegios.contains(1)) {
                        agg_proveedor_bt.setEnabled(true);
                        add_compra_bt.setEnabled(true);
                        agg_prod_bt.setEnabled(true);
                    }
                    if (privilegios.contains(3)) {
                        editar_proveedor_bt.setEnabled(true);
                        edit_prod_bt.setEnabled(true);
                    }
                    if (privilegios.contains(1002)) {
                        eliminar_proveedor_bt.setEnabled(true);
                        eliminar_prod_bt.setEnabled(true);
                    }
                } else if (roles.contains(3003)) {
                    productos_bt.setEnabled(true);
                    usuario_bt.setEnabled(false);
                    proveedor_bt.setEnabled(false);
                    cliente_bt.setEnabled(false);
                    rol_bt.setEnabled(false);
                    privilegio_bt.setEnabled(false);
                    compra_bt.setEnabled(false);
                    ventas_bt.setEnabled(false);
                    ajuste_bt.setEnabled(true);
                    reportes_bt.setEnabled(true);
                    if (privilegios.contains(1)) {
                        agg_ajuste_bt.setEnabled(true);
                        agg_prod_bt.setEnabled(true);
                    }
                    if (privilegios.contains(3)) {
                        edit_prod_bt.setEnabled(true);
                    }
                    if (privilegios.contains(1002)) {
                        eliminar_prod_bt.setEnabled(true);
                    }
                } else {
                    productos_bt.setEnabled(false);
                    usuario_bt.setEnabled(false);
                    proveedor_bt.setEnabled(false);
                    cliente_bt.setEnabled(false);
                    rol_bt.setEnabled(false);
                    privilegio_bt.setEnabled(false);
                    compra_bt.setEnabled(false);
                    ventas_bt.setEnabled(false);
                    ajuste_bt.setEnabled(false);
                }
                rs.close();
                clstmt.close();
                JOptionPane.showMessageDialog(this, "Se ha iniciado sesion correctamente!");
                logged_user_lbl.setText(user_tb.getText());
                menu_panel.show();
                login_panel.hide();
            } else {
                JOptionPane.showMessageDialog(this, "Credenciales Incorrectas");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ingresar_btActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        System.exit(-1);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void ventas_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ventas_btActionPerformed
        try {
            String sqlc = "SELECT * FROM detalle_factura";
            PreparedStatement pstmt2 = connection.prepareCall(sqlc);
            ResultSet result = pstmt2.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("Detalle");
            modeloTabla.addColumn("Factura");
            modeloTabla.addColumn("Producto");
            modeloTabla.addColumn("Cantidad");
            modeloTabla.addColumn("Subtotal");
            modeloTabla.addColumn("Costo");
            modeloTabla.addColumn("Fecha Creacion");
            modeloTabla.addColumn("Fecha Edicion");
            modeloTabla.addColumn("Creador");
            modeloTabla.addColumn("Editor");
            while (result.next()) {
                Object[] fila = {result.getInt("id_detalle"), result.getInt("id_factura"), result.getInt("codigo_producto"), result.getInt("cantidad_detalle"), result.getDouble("subtotal_detalle"),
                    result.getDouble("precio_venta"), result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                modeloTabla.addRow(fila);
            }
            tabla_ventas.setModel(modeloTabla);
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        menu_panel.hide();
        venta_panel.show();
    }//GEN-LAST:event_ventas_btActionPerformed

    private void privilegio_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privilegio_btActionPerformed
        try {
            String sql2 = "SELECT * FROM privilegio";
            PreparedStatement pstmt = connection.prepareCall(sql2);
            ResultSet rs = pstmt.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("id_privilegio");
            modeloTabla.addColumn("nombre privilegio");
            modeloTabla.addColumn("fecha creacion");
            modeloTabla.addColumn("fecha edicion");
            modeloTabla.addColumn("usuario creador");
            modeloTabla.addColumn("usuario editor");
            while (rs.next()) {
                Object[] fila = {rs.getInt("id_privilegio"), rs.getString("nombre_privilegio"), rs.getString("fecha_creacion"),
                    rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                modeloTabla.addRow(fila);
            }
            tabla_privilegios.setModel(modeloTabla);
            menu_panel.hide();
            privilegio_panel.show();
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_privilegio_btActionPerformed

    private void rol_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rol_btActionPerformed
        try {
            String sql = "SELECT * FROM rol";
            PreparedStatement pstmt = connection.prepareCall(sql);
            ResultSet rs = pstmt.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("id_rol");
            modeloTabla.addColumn("nombre rol");
            modeloTabla.addColumn("fecha creacion");
            modeloTabla.addColumn("fecha edicion");
            modeloTabla.addColumn("usuario creador");
            modeloTabla.addColumn("usuario editor");
            while (rs.next()) {
                Object[] fila = {rs.getInt("id_rol"), rs.getString("nombre_rol"), rs.getString("fecha_creacion"),
                    rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                modeloTabla.addRow(fila);
            }
            tabla_roles.setModel(modeloTabla);
            menu_panel.hide();
            rol_panel.show();
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rol_btActionPerformed

    private void proveedor_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proveedor_btActionPerformed
        try {
            String sql2 = "SELECT * FROM proveedor";
            PreparedStatement pstmt = connection.prepareCall(sql2);
            ResultSet rs = pstmt.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("codigo");
            modeloTabla.addColumn("nombre");
            modeloTabla.addColumn("Direccion");
            modeloTabla.addColumn("telefono");
            modeloTabla.addColumn("Estado");
            modeloTabla.addColumn("Contacto");
            modeloTabla.addColumn("fecha creacion");
            modeloTabla.addColumn("fecha edicion");
            modeloTabla.addColumn("usuario creador");
            modeloTabla.addColumn("usuario editor");
            while (rs.next()) {
                Object[] fila = {rs.getInt("codigo_proveedor"), rs.getString("nombre_proveedor"), rs.getString("direccion_proveedor"), rs.getString("telefono_proveedor"), rs.getString("estado_proveedor"),
                    rs.getString("contacto_principal"), rs.getString("fecha_creacion"), rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                modeloTabla.addRow(fila);
            }
            tabla_proveedores.setModel(modeloTabla);
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        menu_panel.hide();
        proveedor_panel.show();
    }//GEN-LAST:event_proveedor_btActionPerformed

    private void productos_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productos_btActionPerformed
        try {
            String sql2 = "SELECT * FROM producto";
            PreparedStatement pstmt = connection.prepareCall(sql2);
            ResultSet rs = pstmt.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("codigo");
            modeloTabla.addColumn("nombre");
            modeloTabla.addColumn("estado");
            modeloTabla.addColumn("precio");
            modeloTabla.addColumn("marca");
            modeloTabla.addColumn("categoria");
            modeloTabla.addColumn("existencia");
            modeloTabla.addColumn("costo");
            modeloTabla.addColumn("Existencia Minima");
            modeloTabla.addColumn("Existencia Maxima");
            modeloTabla.addColumn("fecha creacion");
            modeloTabla.addColumn("fecha edicion");
            modeloTabla.addColumn("usuario creador");
            modeloTabla.addColumn("usuario editor");
            while (rs.next()) {
                Object[] fila = {rs.getInt("codigo_producto"), rs.getString("nombre_producto"), rs.getString("estado_producto"), rs.getDouble("precio_producto"), rs.getString("marca_producto"),
                    rs.getString("categoria_producto"), rs.getInt("existencia_producto"), rs.getDouble("costo_producto"), rs.getInt("existencia_minima"), rs.getInt("existencia_maxima"), rs.getString("fecha_creacion"), rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                modeloTabla.addRow(fila);
            }
            tabla_products.setModel(modeloTabla);
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        menu_panel.hide();
        productos_panel.show();
    }//GEN-LAST:event_productos_btActionPerformed

    private void cliente_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cliente_btActionPerformed
        try {
            String sqlc = "SELECT * FROM cliente";
            PreparedStatement pstmt2 = connection.prepareCall(sqlc);
            ResultSet result = pstmt2.executeQuery();
            modeloTabla = new DefaultTableModel();
            modeloTabla.addColumn("Id cliente");
            modeloTabla.addColumn("Nombre");
            modeloTabla.addColumn("Apellido materno");
            modeloTabla.addColumn("Apellido paterno");
            modeloTabla.addColumn("Fecha Creacion");
            modeloTabla.addColumn("Fecha Edicion");
            modeloTabla.addColumn("Creador");
            modeloTabla.addColumn("Editor");
            while (result.next()) {
                Object[] fila = {result.getInt("id_cliente"), result.getString("nombre_cliente"), result.getString("apellido_materno"), result.getString("apellido_paterno"),
                    result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                modeloTabla.addRow(fila);
            }
            tabla_clientes.setModel(modeloTabla);
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        menu_panel.hide();
        cliente_panel.show();
    }//GEN-LAST:event_cliente_btActionPerformed

    private void usuario_agregar_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuario_agregar_btActionPerformed
        try {
            if (!agg_usuario_tb.getText().equals("")) {
                if (!clave_usuario_tb.getText().equals("")) {
                    String sql = "{call sp_usuario_create(?,?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setString(1, agg_usuario_tb.getText());
                    stmt.setString(2, clave_usuario_tb.getText());
                    stmt.setInt(3, actualUser);
                    stmt.execute();
                    stmt.close();
                    JOptionPane.showMessageDialog(this, "Se ha agregado el usuario!");

                    String sql2 = "SELECT * FROM usuario";
                    PreparedStatement pstmt = connection.prepareCall(sql2);
                    ResultSet rs = pstmt.executeQuery();
                    modeloTabla = new DefaultTableModel();
                    modeloTabla.addColumn("codigo");
                    modeloTabla.addColumn("nombre");
                    modeloTabla.addColumn("fecha creacion");
                    modeloTabla.addColumn("usuario creador");
                    modeloTabla.addColumn("fecha edicion");
                    modeloTabla.addColumn("usuario editor");
                    while (rs.next()) {
                        Object[] fila = {rs.getInt("codigo_usuario"), rs.getString("nombre_usuario"), rs.getString("fecha_creacion"),
                            rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                        rs.getString("clave_usuario");
                        modeloTabla.addRow(fila);
                    }
                    tabla_usuarios.setModel(modeloTabla);
                } else {
                    JOptionPane.showMessageDialog(this, "Debe ingresar una clave para el usuario");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un nombre para el usuario");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usuario_agregar_btActionPerformed

    private void rol_agregar_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rol_agregar_btActionPerformed
        try {
            if (!agg_rol_tb.getText().equals("")) {
                String sql = "{call sp_rol_create(?,?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setString(1, agg_rol_tb.getText());
                stmt.setInt(2, actualUser);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, "Se ha agregado el rol!");

                String sql2 = "SELECT * FROM rol";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("id_rol");
                modeloTabla.addColumn("nombre rol");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("id_rol"), rs.getString("nombre_rol"), rs.getString("fecha_creacion"),
                        rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_roles.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un nombre para el rol");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rol_agregar_btActionPerformed

    private void agg_privilegio_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agg_privilegio_btActionPerformed
        try {
            if (!agg_privilegio_tb.getText().equals("")) {
                String sql = "{call sp_privilegio_create(?,?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setString(1, agg_privilegio_tb.getText());
                stmt.setInt(2, actualUser);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, "Se ha agregado el privilegio!");

                String sql2 = "SELECT * FROM privilegio";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("id_privilegio");
                modeloTabla.addColumn("nombre privilegio");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("id_privilegio"), rs.getString("nombre_privilegio"), rs.getString("fecha_creacion"),
                        rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_privilegios.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un nombre para el rol");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agg_privilegio_btActionPerformed

    private void rol_eliminar_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rol_eliminar_btActionPerformed
        try {
            if (!tabla_roles.getSelectionModel().isSelectionEmpty()) {
                int code = (int) tabla_roles.getValueAt(tabla_roles.getSelectedRow(), 0);
                String sql = "{call sp_rol_delete(?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setInt(1, code);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, ("Se ha eliminado el rol codigo: " + code));

                String sql2 = "SELECT * FROM rol";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("id_rol");
                modeloTabla.addColumn("nombre rol");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("id_rol"), rs.getString("nombre_rol"), rs.getString("fecha_creacion"),
                        rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_roles.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para eliminar un rol");
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_rol_eliminar_btActionPerformed

    private void rol_privilegio_relacion_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rol_privilegio_relacion_btActionPerformed
        try {
            if (!id_rol_privilegio_relacion_tb.getText().equals("")) {
                if (!id_privilegio_rol_relacion_tb.getText().equals("")) {
                    String sql = "{call sp_rol_privilegio_create(?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setInt(1, Integer.parseInt(id_rol_privilegio_relacion_tb.getText()));
                    stmt.setInt(2, Integer.parseInt(id_privilegio_rol_relacion_tb.getText()));
                    int ipr = Integer.parseInt(id_privilegio_rol_relacion_tb.getText()), irp = Integer.parseInt(id_rol_privilegio_relacion_tb.getText());
                    stmt.execute();
                    stmt.close();
                    JOptionPane.showMessageDialog(this, ("Se ha relacionado el rol " + irp + " con el privilegio " + ipr));
                } else {
                    JOptionPane.showMessageDialog(this, "Debe ingresar un id de privilegio");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un id de rol");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rol_privilegio_relacion_btActionPerformed

    private void eliminar_privilegio_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_privilegio_btActionPerformed
        try {
            if (!tabla_privilegios.getSelectionModel().isSelectionEmpty()) {
                int code = (int) tabla_privilegios.getValueAt(tabla_privilegios.getSelectedRow(), 0);
                String sql = "{call sp_privilegio_delete(?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setInt(1, code);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, ("Se ha eliminado el privilegio codigo: " + code));

                String sql2 = "SELECT * FROM privilegio";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("id_privilegio");
                modeloTabla.addColumn("nombre privilegio");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("id_privilegio"), rs.getString("nombre_privilegio"), rs.getString("fecha_creacion"),
                        rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_privilegios.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para eliminar");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_eliminar_privilegio_btActionPerformed

    private void back_rolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_rolActionPerformed
        rol_panel.hide();
        menu_panel.show();
    }//GEN-LAST:event_back_rolActionPerformed

    private void back_privilegioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_privilegioActionPerformed
        privilegio_panel.hide();
        menu_panel.show();
    }//GEN-LAST:event_back_privilegioActionPerformed

    private void back_usuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_usuarioActionPerformed
        usuarios_panel.hide();
        menu_panel.show();
    }//GEN-LAST:event_back_usuarioActionPerformed

    private void editar_privilegio_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editar_privilegio_btActionPerformed
        try {
            if (!tabla_privilegios.getSelectionModel().isSelectionEmpty()) {
                if (!agg_privilegio_tb.getText().equals("")) {
                    int code = (int) tabla_privilegios.getValueAt(tabla_privilegios.getSelectedRow(), 0);
                    String sql = "{call sp_privilegio_update(?,?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setInt(1, code);
                    stmt.setString(2, agg_privilegio_tb.getText());
                    stmt.setInt(3, actualUser);
                    stmt.execute();
                    stmt.close();
                    JOptionPane.showMessageDialog(this, ("Se ha editado el privilegio con codigo: " + code));

                    String sql2 = "SELECT * FROM privilegio";
                    PreparedStatement pstmt = connection.prepareCall(sql2);
                    ResultSet rs = pstmt.executeQuery();
                    modeloTabla = new DefaultTableModel();
                    modeloTabla.addColumn("id_privilegio");
                    modeloTabla.addColumn("nombre privilegio");
                    modeloTabla.addColumn("fecha creacion");
                    modeloTabla.addColumn("usuario creador");
                    modeloTabla.addColumn("fecha edicion");
                    modeloTabla.addColumn("usuario editor");
                    while (rs.next()) {
                        Object[] fila = {rs.getInt("id_privilegio"), rs.getString("nombre_privilegio"), rs.getString("fecha_creacion"),
                            rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                        modeloTabla.addRow(fila);
                    }
                    tabla_privilegios.setModel(modeloTabla);
                } else {
                    JOptionPane.showMessageDialog(this, "Debe ingresar un nombre para el privilegio");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para editar");
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_editar_privilegio_btActionPerformed

    private void usuario_editar_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuario_editar_btActionPerformed
        if (!tabla_usuarios.getSelectionModel().isSelectionEmpty()) {
            try {
                int code = (int) tabla_usuarios.getValueAt(tabla_usuarios.getSelectedRow(), 0);
                if (!agg_usuario_tb.getText().equals("")) {
                    if (!clave_usuario_tb.getText().equals("")) {
                        String sql = "{call sp_usuario_update(?,?,?,?)}";
                        CallableStatement stmt = connection.prepareCall(sql);
                        stmt.setInt(1, code);
                        stmt.setString(2, agg_usuario_tb.getText());
                        stmt.setString(3, clave_usuario_tb.getText());
                        stmt.setInt(4, actualUser);
                        stmt.execute();
                        stmt.close();
                        JOptionPane.showMessageDialog(this, ("Se han actualizado los datos del usuario"));

                        String sql2 = "SELECT * FROM usuario";
                        PreparedStatement pstmt = connection.prepareCall(sql2);
                        ResultSet rs = pstmt.executeQuery();
                        modeloTabla = new DefaultTableModel();
                        modeloTabla.addColumn("codigo");
                        modeloTabla.addColumn("nombre");
                        modeloTabla.addColumn("fecha creacion");
                        modeloTabla.addColumn("fecha edicion");
                        modeloTabla.addColumn("usuario creador");
                        modeloTabla.addColumn("usuario editor");
                        while (rs.next()) {
                            Object[] fila = {rs.getInt("codigo_usuario"), rs.getString("nombre_usuario"), rs.getString("fecha_creacion"),
                                rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                            rs.getString("clave_usuario");
                            modeloTabla.addRow(fila);
                        }
                        tabla_usuarios.setModel(modeloTabla);
                    } else {
                        JOptionPane.showMessageDialog(this, "Debe ingresar una clave");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Debe ingresar un nombre para el usuario");
                }
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_usuario_editar_btActionPerformed

    private void rela_usuario_rol_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rela_usuario_rol_btActionPerformed
        try {
            if (!tabla_usuarios.getSelectionModel().isSelectionEmpty()) {
                int code = (int) tabla_usuarios.getValueAt(tabla_usuarios.getSelectedRow(), 0);
                if (!rol_usuario_tb.getText().equals("")) {
                    String sql = "{call sp_usuario_rol_create(?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setInt(1, code);
                    stmt.setInt(2, Integer.parseInt(rol_usuario_tb.getText()));
                    stmt.execute();
                    stmt.close();
                    JOptionPane.showMessageDialog(this, ("Se ha relacionado el usuario " + code + " con el rol " + rol_usuario_tb.getText()));
                } else {
                    JOptionPane.showMessageDialog(this, "Debe ingresar un id de rol");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para relacionar");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rela_usuario_rol_btActionPerformed

    private void usuario_eliminar_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuario_eliminar_btActionPerformed
        try {
            if (!tabla_usuarios.getSelectionModel().isSelectionEmpty()) {
                int code = (int) tabla_usuarios.getValueAt(tabla_usuarios.getSelectedRow(), 0);
                String sql = "{call sp_usuario_delete(?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setInt(1, code);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, "Se ha eliminado el usuario con codigo " + code);

                String sql2 = "SELECT * FROM usuario";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("codigo");
                modeloTabla.addColumn("nombre");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("codigo_usuario"), rs.getString("nombre_usuario"), rs.getString("fecha_creacion"),
                        rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    rs.getString("clave_usuario");
                    modeloTabla.addRow(fila);
                }
                tabla_usuarios.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para eliminar");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_usuario_eliminar_btActionPerformed

    private void back_proveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_proveedorActionPerformed
        proveedor_panel.hide();
        menu_panel.show();
    }//GEN-LAST:event_back_proveedorActionPerformed

    private void eliminar_proveedor_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_proveedor_btActionPerformed
        try {
            if (!tabla_proveedores.getSelectionModel().isSelectionEmpty()) {
                int code = (int) tabla_proveedores.getValueAt(tabla_proveedores.getSelectedRow(), 0);
                String sql = "{call sp_proveedor_delete(?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setInt(1, code);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, ("Se ha eliminado el proveedor con codigo: " + code));

                String sql2 = "SELECT * FROM proveedor";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("codigo");
                modeloTabla.addColumn("nombre");
                modeloTabla.addColumn("Direccion");
                modeloTabla.addColumn("telefono");
                modeloTabla.addColumn("Estado");
                modeloTabla.addColumn("Contacto");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("codigo_proveedor"), rs.getString("nombre_proveedor"), rs.getString("direccion_proveedor"), rs.getString("telefono_proveedor"), rs.getString("estado_proveedor"),
                        rs.getString("contacto_principal"), rs.getString("fecha_creacion"), rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_proveedores.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para eliminar un proveedor");
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_eliminar_proveedor_btActionPerformed

    private void agg_proveedor_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agg_proveedor_btActionPerformed
        try {
            if (!nombre_proveedor_tb.getText().equals("") && !direccion_proveedor_tb.getText().equals("")
                    && !telefono_proveedor_tb.getText().equals("") && !contacto_prov_tb.getText().equals("")) {
                String sql = "{call sp_proveedor_create(?,?,?,?,?,?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setString(1, nombre_proveedor_tb.getText());
                stmt.setString(2, direccion_proveedor_tb.getText());
                stmt.setString(3, telefono_proveedor_tb.getText());
                stmt.setString(4, estado_proveedor_cb.getSelectedItem().toString());
                stmt.setString(5, contacto_prov_tb.getText());
                stmt.setInt(6, actualUser);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, ("Se ha agregado el proveedor"));

                String sql2 = "SELECT * FROM proveedor";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("codigo");
                modeloTabla.addColumn("nombre");
                modeloTabla.addColumn("Direccion");
                modeloTabla.addColumn("telefono");
                modeloTabla.addColumn("Estado");
                modeloTabla.addColumn("Contacto");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("codigo_proveedor"), rs.getString("nombre_proveedor"), rs.getString("direccion_proveedor"), rs.getString("telefono_proveedor"), rs.getString("estado_proveedor"),
                        rs.getString("contacto_principal"), rs.getString("fecha_creacion"), rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_proveedores.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Ningun campo debe estar vacio");
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_agg_proveedor_btActionPerformed

    private void editar_proveedor_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editar_proveedor_btActionPerformed
        try {
            if (!tabla_proveedores.getSelectionModel().isSelectionEmpty()) {
                if (!nombre_proveedor_tb.getText().equals("") && !direccion_proveedor_tb.getText().equals("")
                        && !telefono_proveedor_tb.getText().equals("")) {
                    String sql = "{call sp_proveedor_update(?,?,?,?,?,?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    int code = (int) tabla_proveedores.getValueAt(tabla_proveedores.getSelectedRow(), 0);
                    stmt.setInt(1, code);
                    stmt.setString(2, nombre_proveedor_tb.getText());
                    stmt.setString(3, direccion_proveedor_tb.getText());
                    stmt.setString(4, telefono_proveedor_tb.getText());
                    stmt.setString(5, estado_proveedor_cb.getSelectedItem().toString());
                    stmt.setString(6, contacto_prov_tb.getText());
                    stmt.setInt(7, actualUser);
                    stmt.execute();
                    stmt.close();
                    JOptionPane.showMessageDialog(this, ("Se ha actualizado el proveedor"));

                    String sql2 = "SELECT * FROM proveedor";
                    PreparedStatement pstmt = connection.prepareCall(sql2);
                    ResultSet rs = pstmt.executeQuery();
                    modeloTabla = new DefaultTableModel();
                    modeloTabla.addColumn("codigo");
                    modeloTabla.addColumn("nombre");
                    modeloTabla.addColumn("Direccion");
                    modeloTabla.addColumn("telefono");
                    modeloTabla.addColumn("Estado");
                    modeloTabla.addColumn("Contacto");
                    modeloTabla.addColumn("fecha creacion");
                    modeloTabla.addColumn("fecha edicion");
                    modeloTabla.addColumn("usuario creador");
                    modeloTabla.addColumn("usuario editor");
                    while (rs.next()) {
                        Object[] fila = {rs.getInt("codigo_proveedor"), rs.getString("nombre_proveedor"), rs.getString("direccion_proveedor"), rs.getString("telefono_proveedor"), rs.getString("estado_proveedor"),
                            rs.getString("contacto_principal"), rs.getString("fecha_creacion"), rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                        modeloTabla.addRow(fila);
                    }
                    tabla_proveedores.setModel(modeloTabla);
                } else {
                    JOptionPane.showMessageDialog(this, "Ningun campo debe estar vacio");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un proveedor");
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_editar_proveedor_btActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        menu_panel.show();
        productos_panel.hide();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void agg_prod_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agg_prod_btActionPerformed
        try {
            if (!nom_prod_tb.getText().equals("") && !estado_prod_cb.getSelectedItem().toString().equals("") && !precio_prod_tb.getText().equals("")
                    && !marca_prod_tb.getText().equals("") && !cat_prod_tb.getText().equals("") && !cost_prod_tb.getText().equals("")) {
                String sql = "{call sp_producto_create(?,?,?,?,?,?,?,?,?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setString(1, nom_prod_tb.getText());
                stmt.setString(2, estado_prod_cb.getSelectedItem().toString());
                stmt.setDouble(3, Double.parseDouble(precio_prod_tb.getText()));
                stmt.setString(4, marca_prod_tb.getText());
                stmt.setString(5, cat_prod_tb.getText());
                stmt.setDouble(6, Double.parseDouble(cost_prod_tb.getText()));
                if (Integer.parseInt(exis_min_tb.getText()) < Integer.parseInt(exis_max_tb.getText())) {
                    stmt.setInt(7, Integer.parseInt(exis_min_tb.getText()));
                    stmt.setInt(8, Integer.parseInt(exis_max_tb.getText()));
                } else if (Integer.parseInt(exis_min_tb.getText()) > Integer.parseInt(exis_max_tb.getText())) {
                    stmt.setInt(7, Integer.parseInt(exis_max_tb.getText()));
                    stmt.setInt(8, Integer.parseInt(exis_min_tb.getText()));
                }
                stmt.setInt(9, actualUser);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, ("Se ha agregado el producto"));

                String sql2 = "SELECT * FROM producto";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("codigo");
                modeloTabla.addColumn("nombre");
                modeloTabla.addColumn("estado");
                modeloTabla.addColumn("precio");
                modeloTabla.addColumn("marca");
                modeloTabla.addColumn("categoria");
                modeloTabla.addColumn("existencia");
                modeloTabla.addColumn("costo");
                modeloTabla.addColumn("Existencia Minima");
                modeloTabla.addColumn("Existencia Maxima");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("codigo_producto"), rs.getString("nombre_producto"), rs.getString("estado_producto"), rs.getDouble("precio_producto"), rs.getString("marca_producto"),
                        rs.getString("categoria_producto"), rs.getInt("existencia_producto"), rs.getDouble("costo_producto"), rs.getInt("existencia_minima"), rs.getInt("existencia_maxima"), rs.getString("fecha_creacion"), rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_products.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Todos los campos deben ser llenados");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agg_prod_btActionPerformed

    private void edit_prod_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_prod_btActionPerformed
        try {
            if (!tabla_products.getSelectionModel().isSelectionEmpty()) {
                if (!nom_prod_tb.getText().equals("") && !estado_prod_cb.getSelectedItem().toString().equals("") && !precio_prod_tb.getText().equals("")
                        && !marca_prod_tb.getText().equals("") && !cat_prod_tb.getText().equals("") && !cost_prod_tb.getText().equals("")) {
                    int code = (int) tabla_products.getValueAt(tabla_products.getSelectedRow(), 0);
                    String sql = "{call sp_producto_update(?,?,?,?,?,?,?,?,?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setInt(1, code);
                    stmt.setString(2, nom_prod_tb.getText());
                    stmt.setString(3, estado_prod_cb.getSelectedItem().toString());
                    stmt.setDouble(4, Double.parseDouble(precio_prod_tb.getText()));
                    stmt.setString(5, marca_prod_tb.getText());
                    stmt.setString(6, cat_prod_tb.getText());
                    stmt.setDouble(7, Double.parseDouble(cost_prod_tb.getText()));
                    if (Integer.parseInt(exis_min_tb.getText()) < Integer.parseInt(exis_max_tb.getText())) {
                        stmt.setInt(8, Integer.parseInt(exis_min_tb.getText()));
                        stmt.setInt(9, Integer.parseInt(exis_max_tb.getText()));
                    } else if (Integer.parseInt(exis_min_tb.getText()) > Integer.parseInt(exis_max_tb.getText())) {
                        stmt.setInt(8, Integer.parseInt(exis_max_tb.getText()));
                        stmt.setInt(9, Integer.parseInt(exis_min_tb.getText()));
                    }
                    stmt.setInt(10, actualUser);
                    stmt.execute();
                    stmt.close();
                    JOptionPane.showMessageDialog(this, ("Se ha actualizado el producto"));

                    String sql2 = "SELECT * FROM producto";
                    PreparedStatement pstmt = connection.prepareCall(sql2);
                    ResultSet rs = pstmt.executeQuery();
                    modeloTabla = new DefaultTableModel();
                    modeloTabla.addColumn("codigo");
                    modeloTabla.addColumn("nombre");
                    modeloTabla.addColumn("estado");
                    modeloTabla.addColumn("precio");
                    modeloTabla.addColumn("marca");
                    modeloTabla.addColumn("categoria");
                    modeloTabla.addColumn("existencia");
                    modeloTabla.addColumn("costo");
                    modeloTabla.addColumn("Existencia Minima");
                    modeloTabla.addColumn("Existenica Maxima");
                    modeloTabla.addColumn("fecha creacion");
                    modeloTabla.addColumn("fecha edicion");
                    modeloTabla.addColumn("usuario creador");
                    modeloTabla.addColumn("usuario editor");
                    while (rs.next()) {
                        Object[] fila = {rs.getInt("codigo_producto"), rs.getString("nombre_producto"), rs.getString("estado_producto"), rs.getDouble("precio_producto"), rs.getString("marca_producto"),
                            rs.getString("categoria_producto"), rs.getInt("existencia_producto"), rs.getDouble("costo_producto"), rs.getInt("existencia_minima"), rs.getInt("existencia_maxima"), rs.getString("fecha_creacion"), rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                        modeloTabla.addRow(fila);
                    }
                    tabla_products.setModel(modeloTabla);
                } else {
                    JOptionPane.showMessageDialog(this, "Todas las casillas deben estar llenas");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_edit_prod_btActionPerformed

    private void eliminar_prod_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_prod_btActionPerformed
        try {
            if (!tabla_products.getSelectionModel().isSelectionEmpty()) {
                int code = (int) tabla_products.getValueAt(tabla_products.getSelectedRow(), 0);
                String sql = "{call sp_producto_delete(?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setInt(1, code);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, ("Se ha eliminado el producto"));

                String sql2 = "SELECT * FROM producto";
                PreparedStatement pstmt = connection.prepareCall(sql2);
                ResultSet rs = pstmt.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("codigo");
                modeloTabla.addColumn("nombre");
                modeloTabla.addColumn("estado");
                modeloTabla.addColumn("precio");
                modeloTabla.addColumn("marca");
                modeloTabla.addColumn("categoria");
                modeloTabla.addColumn("existencia");
                modeloTabla.addColumn("costo");
                modeloTabla.addColumn("Existencia Minima");
                modeloTabla.addColumn("Existencia Maxima");
                modeloTabla.addColumn("fecha creacion");
                modeloTabla.addColumn("fecha edicion");
                modeloTabla.addColumn("usuario creador");
                modeloTabla.addColumn("usuario editor");
                while (rs.next()) {
                    Object[] fila = {rs.getInt("codigo_producto"), rs.getString("nombre_producto"), rs.getString("estado_producto"), rs.getDouble("precio_producto"), rs.getString("marca_producto"),
                        rs.getString("categoria_producto"), rs.getInt("existencia_producto"), rs.getDouble("costo_producto"), rs.getInt("existencia_minima"), rs.getInt("existencia_maxima"), rs.getString("fecha_creacion"), rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_products.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_eliminar_prod_btActionPerformed

    private void add_compra_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_compra_btActionPerformed
        try {
            String sql = "{? = call verificar_existencia(?,?,?)}";
            CallableStatement verstmt = connection.prepareCall(sql);
            verstmt.registerOutParameter(1, Types.INTEGER);
            verstmt.setInt(2, Integer.parseInt(dc_prod_tb.getText()));
            verstmt.setInt(3, Integer.parseInt(dc_cantidad_tb.getText()));
            verstmt.setString(4, "COMPRA");
            verstmt.execute();
            int resultado = verstmt.getInt(1);
            verstmt.close();
            if (resultado != -1) {
                sql = "{? = call verificar_proveedor(?)}";
                CallableStatement stmvp = connection.prepareCall(sql);
                stmvp.registerOutParameter(1, Types.INTEGER);
                stmvp.setInt(2, Integer.parseInt(prov_compras_tb.getText()));
                stmvp.execute();
                resultado = stmvp.getInt(1);
                stmvp.close();
                if (resultado != -1) {
                    sql = "{call sp_producto_read(?)}";
                    CallableStatement stmt2 = connection.prepareCall(sql);
                    int codprod = Integer.parseInt(dc_prod_tb.getText());
                    stmt2.setInt(1, codprod);
                    ResultSet rs = stmt2.executeQuery();
                    double cost = 0;
                    while (rs.next()) {
                        cost = rs.getDouble("costo_producto");
                    }
                    stmt2.execute();
                    stmt2.close();

                    sql = "{call sp_compra_create(?,?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setString(1, prov_compras_tb.getText());
                    stmt.setDouble(2, (Integer.parseInt(dc_cantidad_tb.getText()) * cost));
                    stmt.setInt(3, actualUser);
                    stmt.execute();
                    stmt.close();

                    String sql3 = "SELECT TOP 1 id_compra FROM compra ORDER BY id_compra DESC;";
                    PreparedStatement pstmt = connection.prepareCall(sql3);
                    ResultSet rset = pstmt.executeQuery();
                    int code = 0;
                    while (rset.next()) {
                        code = rset.getInt("id_compra");
                    }
                    sql = "{call sp_detalle_compra_create(?,?,?,?,?,?)}";
                    CallableStatement stmt3 = connection.prepareCall(sql);
                    stmt3.setInt(1, code);
                    stmt3.setInt(2, Integer.parseInt(dc_cantidad_tb.getText()));
                    stmt3.setDouble(3, (Integer.parseInt(dc_cantidad_tb.getText()) * cost));
                    stmt3.setDouble(4, cost);
                    stmt3.setInt(5, actualUser);
                    stmt3.setInt(6, codprod);
                    stmt3.execute();
                    stmt3.close();
                    JOptionPane.showMessageDialog(this, ("Se ha agregado la compra y sus detalles"));

                    String sqlc = "SELECT * FROM detalle_compra";
                    PreparedStatement pstmt2 = connection.prepareCall(sqlc);
                    ResultSet result = pstmt2.executeQuery();
                    modeloTabla = new DefaultTableModel();
                    modeloTabla.addColumn("Detalle");
                    modeloTabla.addColumn("Compra");
                    modeloTabla.addColumn("Producto");
                    modeloTabla.addColumn("Cantidad");
                    modeloTabla.addColumn("Subtotal");
                    modeloTabla.addColumn("Costo");
                    modeloTabla.addColumn("Fecha Creacion");
                    modeloTabla.addColumn("Fecha Edicion");
                    modeloTabla.addColumn("Creador");
                    modeloTabla.addColumn("Editor");
                    while (result.next()) {
                        Object[] fila = {result.getInt("id_detalle"), result.getInt("id_compra"), result.getInt("codigo_producto"), result.getInt("cantidad_detalle"), result.getDouble("subtotal_detalle"), result.getDouble("costo_detalle"),
                            result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                        modeloTabla.addRow(fila);
                    }
                    tabla_compras.setModel(modeloTabla);
                } else {
                    JOptionPane.showMessageDialog(this, "El Proveedor no esta disponible!");
                }
            } else {
                JOptionPane.showMessageDialog(this, "La cantidad sobrepasa la existencia maxima!");
            }
        } catch (SQLException sqle) {
            System.out.println(sqle);
        }
    }//GEN-LAST:event_add_compra_btActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        menu_panel.show();
        compra_panel.hide();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void back_cliente_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_cliente_btActionPerformed
        menu_panel.show();
        cliente_panel.hide();
    }//GEN-LAST:event_back_cliente_btActionPerformed

    private void agg_cliente_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agg_cliente_btActionPerformed
        try {
            if (!nom_cliente_tb.getText().equals("") && !am_cliente_tb.getText().equals("") && !ap_cliente_tb.getText().equals("")) {
                String sql = "{call sp_cliente_create(?,?,?,?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setString(1, nom_cliente_tb.getText());
                stmt.setString(2, am_cliente_tb.getText());
                stmt.setString(3, ap_cliente_tb.getText());
                stmt.setInt(4, actualUser);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, ("Se ha agregado el cliente"));

                String sqlc = "SELECT * FROM cliente";
                PreparedStatement pstmt2 = connection.prepareCall(sqlc);
                ResultSet result = pstmt2.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("Id cliente");
                modeloTabla.addColumn("Nombre");
                modeloTabla.addColumn("Apellido materno");
                modeloTabla.addColumn("Apellido paterno");
                modeloTabla.addColumn("Fecha Creacion");
                modeloTabla.addColumn("Fecha Edicion");
                modeloTabla.addColumn("Creador");
                modeloTabla.addColumn("Editor");
                while (result.next()) {
                    Object[] fila = {result.getInt("id_cliente"), result.getString("nombre_cliente"), result.getString("apellido_materno"), result.getString("apellido_paterno"),
                        result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_clientes.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Todos los campos deben ser llenados!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agg_cliente_btActionPerformed

    private void edit_cliente_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_cliente_btActionPerformed
        try {
            if (!tabla_clientes.getSelectionModel().isSelectionEmpty()) {
                if (!nom_cliente_tb.getText().equals("") && !am_cliente_tb.getText().equals("") && !ap_cliente_tb.getText().equals("")) {
                    int code = (int) tabla_clientes.getValueAt(tabla_clientes.getSelectedRow(), 0);
                    String sql = "{call sp_cliente_update(?,?,?,?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setInt(1, code);
                    stmt.setString(2, nom_cliente_tb.getText());
                    stmt.setString(3, am_cliente_tb.getText());
                    stmt.setString(4, ap_cliente_tb.getText());
                    stmt.setInt(5, actualUser);
                    stmt.execute();
                    stmt.close();
                    JOptionPane.showMessageDialog(this, ("Se ha actualizado el cliente"));

                    String sqlc = "SELECT * FROM cliente";
                    PreparedStatement pstmt2 = connection.prepareCall(sqlc);
                    ResultSet result = pstmt2.executeQuery();
                    modeloTabla = new DefaultTableModel();
                    modeloTabla.addColumn("Id cliente");
                    modeloTabla.addColumn("Nombre");
                    modeloTabla.addColumn("Apellido materno");
                    modeloTabla.addColumn("Apellido paterno");
                    modeloTabla.addColumn("Fecha Creacion");
                    modeloTabla.addColumn("Fecha Edicion");
                    modeloTabla.addColumn("Creador");
                    modeloTabla.addColumn("Editor");
                    while (result.next()) {
                        Object[] fila = {result.getInt("id_cliente"), result.getString("nombre_cliente"), result.getString("apellido_materno"), result.getString("apellido_paterno"),
                            result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                        modeloTabla.addRow(fila);
                    }
                    tabla_clientes.setModel(modeloTabla);
                } else {
                    JOptionPane.showMessageDialog(this, "Todos los campos deben ser llenados!");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_edit_cliente_btActionPerformed

    private void del_cliente_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del_cliente_btActionPerformed
        try {
            if (!tabla_clientes.getSelectionModel().isSelectionEmpty()) {
                int code = (int) tabla_clientes.getValueAt(tabla_clientes.getSelectedRow(), 0);
                String sql = "{call sp_cliente_delete(?)}";
                CallableStatement stmt = connection.prepareCall(sql);
                stmt.setInt(1, code);
                stmt.execute();
                stmt.close();
                JOptionPane.showMessageDialog(this, ("Se ha eliminado el cliente"));

                String sqlc = "SELECT * FROM cliente";
                PreparedStatement pstmt2 = connection.prepareCall(sqlc);
                ResultSet result = pstmt2.executeQuery();
                modeloTabla = new DefaultTableModel();
                modeloTabla.addColumn("Id cliente");
                modeloTabla.addColumn("Nombre");
                modeloTabla.addColumn("Apellido materno");
                modeloTabla.addColumn("Apellido paterno");
                modeloTabla.addColumn("Fecha Creacion");
                modeloTabla.addColumn("Fecha Edicion");
                modeloTabla.addColumn("Creador");
                modeloTabla.addColumn("Editor");
                while (result.next()) {
                    Object[] fila = {result.getInt("id_cliente"), result.getString("nombre_cliente"), result.getString("apellido_materno"), result.getString("apellido_paterno"),
                        result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                    modeloTabla.addRow(fila);
                }
                tabla_clientes.setModel(modeloTabla);
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_del_cliente_btActionPerformed

    private void back_ventasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_ventasActionPerformed
        menu_panel.show();
        venta_panel.hide();
    }//GEN-LAST:event_back_ventasActionPerformed

    private void agg_factura_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agg_factura_btActionPerformed
        try {
            if (!cli_nombre_tb.getText().equals("") && !cod_producto_tb.getText().equals("")
                    && !cant_venta_tb.getText().equals("")) {
                String sql = "{? = call verificar_existencia(?,?,?)}";
                CallableStatement verstmt = connection.prepareCall(sql);
                verstmt.registerOutParameter(1, Types.INTEGER);
                verstmt.setInt(2, Integer.parseInt(cod_producto_tb.getText()));
                verstmt.setInt(3, Integer.parseInt(cant_venta_tb.getText()));
                verstmt.setString(4, "VENTA");
                verstmt.execute();
                int resultado = verstmt.getInt(1);
                verstmt.close();
                if (resultado != -1) {
                    sql = "{? = call verificar_disponibilidad(?)}";
                    CallableStatement stmvd = connection.prepareCall(sql);
                    stmvd.registerOutParameter(1, Types.INTEGER);
                    stmvd.setInt(2, Integer.parseInt(cod_producto_tb.getText()));
                    stmvd.execute();
                    resultado = stmvd.getInt(1);
                    stmvd.close();
                    if (resultado != -1) {
                        int codprod = Integer.parseInt(cod_producto_tb.getText());
                        sql = "{call sp_factura_create(?,?,?,?)}";
                        CallableStatement stmt = connection.prepareCall(sql);
                        stmt.setInt(1, Integer.parseInt(cli_nombre_tb.getText()));
                        stmt.setInt(2, codprod);
                        stmt.setInt(3, Integer.parseInt(cant_venta_tb.getText()));
                        stmt.setInt(4, actualUser);
                        stmt.execute();
                        stmt.close();

                        String sql3 = "SELECT TOP 1 id_factura FROM factura ORDER BY id_factura DESC;";
                        PreparedStatement pstmt = connection.prepareCall(sql3);
                        ResultSet rset = pstmt.executeQuery();
                        int code = 0;
                        while (rset.next()) {
                            code = rset.getInt("id_factura");
                        }
                        sql = "{call sp_detalle_factura_create(?,?,?,?)}";
                        CallableStatement stmt3 = connection.prepareCall(sql);
                        stmt3.setInt(1, Integer.parseInt(cli_nombre_tb.getText()));
                        stmt3.setInt(2, Integer.parseInt(cod_producto_tb.getText()));
                        stmt3.setInt(3, Integer.parseInt(cant_venta_tb.getText()));
                        stmt3.setInt(4, actualUser);
                        stmt3.execute();
                        stmt3.close();
                        JOptionPane.showMessageDialog(this, ("Se ha agregado la factura y sus detalles"));

                        String sqlc = "SELECT * FROM detalle_factura";
                        PreparedStatement pstmt2 = connection.prepareCall(sqlc);
                        ResultSet result = pstmt2.executeQuery();
                        modeloTabla = new DefaultTableModel();
                        modeloTabla.addColumn("Detalle");
                        modeloTabla.addColumn("Factura");
                        modeloTabla.addColumn("Producto");
                        modeloTabla.addColumn("Cantidad");
                        modeloTabla.addColumn("Subtotal");
                        modeloTabla.addColumn("Costo");
                        modeloTabla.addColumn("Fecha Creacion");
                        modeloTabla.addColumn("Fecha Edicion");
                        modeloTabla.addColumn("Creador");
                        modeloTabla.addColumn("Editor");
                        while (result.next()) {
                            Object[] fila = {result.getInt("id_detalle"), result.getInt("id_factura"), result.getInt("codigo_producto"), result.getInt("cantidad_detalle"), result.getDouble("subtotal_detalle"),
                                result.getDouble("precio_venta"), result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                            modeloTabla.addRow(fila);
                        }
                        tabla_ventas.setModel(modeloTabla);
                    } else {
                        JOptionPane.showMessageDialog(this, "El producto esta innactivo!");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La cantidad sobrepasa la existencia minima!");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe llenar todos los campos!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agg_factura_btActionPerformed

    private void agg_ajuste_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agg_ajuste_btActionPerformed
        try {
            if (!cod_prod_ajuste.getText().equals("") && !cant_ajuste_tb.getText().equals("")) {
                int resultado;
                String sql = "{? = call verificar_existencia(?,?,?)}";
                CallableStatement stmve = connection.prepareCall(sql);
                stmve.registerOutParameter(1, Types.INTEGER);
                stmve.setInt(2, Integer.parseInt(cod_prod_ajuste.getText()));
                stmve.setInt(3, Integer.parseInt(cant_ajuste_tb.getText()));
                stmve.setString(4, tipo_ajuste_cb.getSelectedItem().toString());
                stmve.execute();
                resultado = stmve.getInt(1);
                stmve.close();
                if (resultado != -1) {
                    sql = "{call sp_ajuste_create(?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setString(1, tipo_ajuste_cb.getSelectedItem().toString());
                    stmt.setInt(2, actualUser);
                    stmt.execute();
                    stmt.close();

                    String sql3 = "SELECT TOP 1 id_ajuste FROM ajuste ORDER BY id_ajuste DESC;";
                    PreparedStatement pstmt = connection.prepareCall(sql3);
                    ResultSet rset = pstmt.executeQuery();
                    int code = 0;
                    while (rset.next()) {
                        code = rset.getInt("id_ajuste");
                    }
                    sql = "{call sp_detalle_ajuste_create(?,?,?,?)}";
                    CallableStatement stmt3 = connection.prepareCall(sql);
                    stmt3.setInt(1, code);
                    stmt3.setInt(2, Integer.parseInt(cod_prod_ajuste.getText()));
                    stmt3.setInt(3, Integer.parseInt(cant_ajuste_tb.getText()));
                    stmt3.setInt(4, actualUser);
                    stmt3.execute();
                    stmt3.close();
                    JOptionPane.showMessageDialog(this, ("Se ha agregado el ajuste y sus detalles"));

                    String sqlc = "SELECT * FROM detalle_ajuste";
                    PreparedStatement pstmt2 = connection.prepareCall(sqlc);
                    ResultSet result = pstmt2.executeQuery();
                    sqlc = "SELECT * FROM ajuste";
                    PreparedStatement pstmt3 = connection.prepareCall(sqlc);
                    ResultSet result2 = pstmt3.executeQuery();
                    modeloTabla = new DefaultTableModel();
                    modeloTabla.addColumn("Detalle");
                    modeloTabla.addColumn("Ajuste");
                    modeloTabla.addColumn("Producto");
                    modeloTabla.addColumn("Tipo");
                    modeloTabla.addColumn("Cantidad");
                    modeloTabla.addColumn("Subtotal");
                    modeloTabla.addColumn("Costo");
                    modeloTabla.addColumn("Fecha Creacion");
                    modeloTabla.addColumn("Fecha Edicion");
                    modeloTabla.addColumn("Creador");
                    modeloTabla.addColumn("Editor");
                    while (result.next() && result2.next()) {
                        result2.getInt("id_ajuste");
                        Object[] fila = {result.getInt("id_detalle"), result.getInt("id_ajuste"), result.getInt("codigo_producto"), result2.getString("comentario_ajuste"), result.getInt("cantidad_detalle"), result.getDouble("subtotal_detalle"),
                            result.getDouble("costo_detalle"), result.getString("fecha_creacion"), result.getString("fecha_edicion"), result.getInt("usuario_creador"), result.getString("usuario_editor")};
                        modeloTabla.addRow(fila);
                        result2.getString("fecha_creacion");
                        result2.getString("fecha_edicion");
                        result2.getInt("usuario_creacion");
                        result2.getInt("usuario_editor");
                    }
                    tabla_ajustes.setModel(modeloTabla);
                } else if (tipo_ajuste_cb.getSelectedItem().toString().equals("SALIDA")) {
                    JOptionPane.showMessageDialog(this, "No hay suficiente producto en el inventario para vender");
                } else if (tipo_ajuste_cb.getSelectedItem().toString().equals("ENTRADA")) {
                    JOptionPane.showMessageDialog(this, "No hay suficiente almacen para el producto en el inventario");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe llenar todos los campos!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agg_ajuste_btActionPerformed

    private void back_ajusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_ajusteActionPerformed
        menu_panel.show();
        ajuste_panel.hide();
    }//GEN-LAST:event_back_ajusteActionPerformed

    private void rol_editar_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rol_editar_btActionPerformed
        try {
            if (!tabla_roles.getSelectionModel().isSelectionEmpty()) {
                if (!agg_rol_tb.getText().equals("")) {
                    String sql = "{call sp_rol_update(?,?,?)}";
                    CallableStatement stmt = connection.prepareCall(sql);
                    stmt.setInt(1, (int) tabla_roles.getValueAt(tabla_roles.getSelectedRow(), 0));
                    stmt.setString(2, agg_rol_tb.getText());
                    stmt.setInt(3, actualUser);
                    stmt.execute();
                    stmt.close();
                    JOptionPane.showMessageDialog(this, "Se ha editado el rol!");

                    String sql2 = "SELECT * FROM rol";
                    PreparedStatement pstmt = connection.prepareCall(sql2);
                    ResultSet rs = pstmt.executeQuery();
                    modeloTabla = new DefaultTableModel();
                    modeloTabla.addColumn("id_rol");
                    modeloTabla.addColumn("nombre rol");
                    modeloTabla.addColumn("fecha creacion");
                    modeloTabla.addColumn("usuario creador");
                    modeloTabla.addColumn("fecha edicion");
                    modeloTabla.addColumn("usuario editor");
                    while (rs.next()) {
                        Object[] fila = {rs.getInt("id_rol"), rs.getString("nombre_rol"), rs.getString("fecha_creacion"),
                            rs.getString("fecha_edicion"), rs.getInt("usuario_creador"), rs.getInt("usuario_editor")};
                        modeloTabla.addRow(fila);
                    }
                    tabla_roles.setModel(modeloTabla);
                } else {
                    JOptionPane.showMessageDialog(this, "Debe ingresar un nombre para el rol");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una fila de la tabla!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rol_editar_btActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_compra_bt;
    private javax.swing.JButton agg_ajuste_bt;
    private javax.swing.JButton agg_cliente_bt;
    private javax.swing.JButton agg_factura_bt;
    private javax.swing.JButton agg_privilegio_bt;
    private javax.swing.JTextField agg_privilegio_tb;
    private javax.swing.JButton agg_prod_bt;
    private javax.swing.JButton agg_proveedor_bt;
    private javax.swing.JTextField agg_rol_tb;
    private javax.swing.JTextField agg_usuario_tb;
    private javax.swing.JButton ajuste_bt;
    private javax.swing.JPanel ajuste_panel;
    private javax.swing.JTextField am_cliente_tb;
    private javax.swing.JTextField ap_cliente_tb;
    private javax.swing.JButton back_ajuste;
    private javax.swing.JButton back_cliente_bt;
    private javax.swing.JButton back_privilegio;
    private javax.swing.JButton back_proveedor;
    private javax.swing.JButton back_rol;
    private javax.swing.JButton back_usuario;
    private javax.swing.JButton back_ventas;
    private javax.swing.JLabel bienvenido_lbl;
    private javax.swing.JTextField cant_ajuste_tb;
    private javax.swing.JTextField cant_venta_tb;
    private javax.swing.JTextField cat_prod_tb;
    private javax.swing.JButton cerrar_sesion_bt;
    private javax.swing.JTextField clave_usuario_tb;
    private javax.swing.JTextField cli_nombre_tb;
    private javax.swing.JButton cliente_bt;
    private javax.swing.JPanel cliente_panel;
    private javax.swing.JTextField cod_prod_ajuste;
    private javax.swing.JTextField cod_producto_tb;
    private javax.swing.JButton compra_bt;
    private javax.swing.JPanel compra_panel;
    private javax.swing.JTextField contacto_prov_tb;
    private javax.swing.JTextField cost_prod_tb;
    private javax.swing.JTextField dc_cantidad_tb;
    private javax.swing.JTextField dc_prod_tb;
    private javax.swing.JButton del_cliente_bt;
    private javax.swing.JTextField direccion_proveedor_tb;
    private javax.swing.JButton edit_cliente_bt;
    private javax.swing.JButton edit_prod_bt;
    private javax.swing.JButton editar_privilegio_bt;
    private javax.swing.JButton editar_proveedor_bt;
    private javax.swing.JButton eliminar_privilegio_bt;
    private javax.swing.JButton eliminar_prod_bt;
    private javax.swing.JButton eliminar_proveedor_bt;
    private javax.swing.JComboBox<String> estado_prod_cb;
    private javax.swing.JComboBox<String> estado_proveedor_cb;
    private javax.swing.JTextField exis_max_tb;
    private javax.swing.JTextField exis_min_tb;
    private javax.swing.JTextField fondo_amarillo_lbl;
    private javax.swing.JLabel icon_menu_lbl;
    private javax.swing.JTextField id_privilegio_rol_relacion_tb;
    private javax.swing.JTextField id_rol_privilegio_relacion_tb;
    private javax.swing.JButton ingresar_bt;
    private javax.swing.JLabel invtec_lbl;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel logged_user_lbl;
    private javax.swing.JPanel login_panel;
    private javax.swing.JTextField marca_prod_tb;
    private javax.swing.JPanel menu_panel;
    private javax.swing.JTextField nom_cliente_tb;
    private javax.swing.JTextField nom_prod_tb;
    private javax.swing.JTextField nombre_proveedor_tb;
    private javax.swing.JLabel pass_lbl;
    private javax.swing.JPasswordField pass_tb;
    private javax.swing.JTextField precio_prod_tb;
    private javax.swing.JButton privilegio_bt;
    private javax.swing.JLabel privilegio_lbl;
    private javax.swing.JLabel privilegio_lbl1;
    private javax.swing.JLabel privilegio_lbl2;
    private javax.swing.JPanel privilegio_panel;
    private javax.swing.JLabel producto_lbl;
    private javax.swing.JButton productos_bt;
    private javax.swing.JPanel productos_panel;
    private javax.swing.JTextField prov_compras_tb;
    private javax.swing.JButton proveedor_bt;
    private javax.swing.JPanel proveedor_panel;
    private javax.swing.JButton rela_usuario_rol_bt;
    private javax.swing.JButton reportes_bt;
    private javax.swing.JButton rol_agregar_bt;
    private javax.swing.JButton rol_bt;
    private javax.swing.JButton rol_editar_bt;
    private javax.swing.JButton rol_eliminar_bt;
    private javax.swing.JLabel rol_lbl;
    private javax.swing.JPanel rol_panel;
    private javax.swing.JButton rol_privilegio_relacion_bt;
    private javax.swing.JTextField rol_usuario_tb;
    private javax.swing.JLabel shape1_lbl;
    private javax.swing.JLabel shape2_lbl;
    private javax.swing.JTable tabla_ajustes;
    private javax.swing.JTable tabla_clientes;
    private javax.swing.JTable tabla_compras;
    private javax.swing.JTable tabla_privilegios;
    private javax.swing.JTable tabla_products;
    private javax.swing.JTable tabla_proveedores;
    private javax.swing.JTable tabla_roles;
    private javax.swing.JTable tabla_usuarios;
    private javax.swing.JTable tabla_ventas;
    private javax.swing.JTextField telefono_proveedor_tb;
    private javax.swing.JComboBox<String> tipo_ajuste_cb;
    private javax.swing.JLabel user_icon_lb;
    private javax.swing.JLabel user_lbl;
    private javax.swing.JTextField user_tb;
    private javax.swing.JButton usuario_agregar_bt;
    private javax.swing.JButton usuario_bt;
    private javax.swing.JLabel usuario_crud_lbl;
    private javax.swing.JButton usuario_editar_bt;
    private javax.swing.JButton usuario_eliminar_bt;
    private javax.swing.JPanel usuarios_panel;
    private javax.swing.JPanel venta_panel;
    private javax.swing.JButton ventas_bt;
    // End of variables declaration//GEN-END:variables
}
